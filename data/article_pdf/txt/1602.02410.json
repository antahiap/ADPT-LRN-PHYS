[
    {
        "id": "",
        "section": "Abstract",
        "text": "In this work we explore recent advances in Re-\ncurrent Neural Networks for large scale Lan-\nguage Modeling, a task central to language un-\nderstanding. We extend current models to deal\nwith two key challenges present in this task: cor-\npora and vocabulary sizes, and complex, long\nterm structure of language. We perform an ex-\nhaustive study on techniques such as character\nConvolutional Neural Networks or Long-Short\nTerm Memory, on the One Billion Word Bench-\nmark. Our best single model signi\ufb01cantly im-\nproves state-of-the-art perplexity from 51.3 down\nto 30.0 (whilst reducing the number of param-\neters by a factor of 20), while an ensemble of\nmodels sets a new record by improving perplex-\nity from 41.0 down to 23.7. We also release these\nmodels for the NLP and ML community to study\nand improve upon.",
        "subsection": []
    },
    {
        "id": "1.",
        "section": "Introduction",
        "text": "Language Modeling (LM) is a task central to Natural\nLanguage Processing (NLP) and Language Understanding.\nModels which can accurately place distributions over sen-\ntences not only encode complexities of language such as\ngrammatical structure, but also distill a fair amount of in-\nformation about the knowledge that a corpora may con-\ntain. Indeed, models that are able to assign a low probabil-\nity to sentences that are grammatically correct but unlikely\nmay help other tasks in fundamental language understand-\ning like question answering, machine translation, or text\nsummarization.\nLMs have played a key role in traditional NLP tasks such\nas speech recognition (Mikolov et al., 2010; Arisoy et al.,\n2012), machine translation (Schwenk et al., 2012; Vaswani\net al.), or text summarization (Rush et al., 2015; Filippova\net al., 2015). Often (although not always), training betterlanguage models improves the underlying metrics of the\ndownstream task (such as word error rate for speech recog-\nnition, or BLEU score for translation), which makes the\ntask of training better LMs valuable by itself.\nFurther, when trained on vast amounts of data, language\nmodels compactly extract knowledge encoded in the train-\ning data. For example, when trained on movie subti-\ntles (Serban et al., 2015; Vinyals & Le, 2015), these lan-\nguage models are able to generate basic answers to ques-\ntions about object colors, facts about people, etc. Lastly,\nrecently proposed sequence-to-sequence models employ\nconditional language models (Mikolov & Zweig, 2012) as\ntheir key component to solve diverse tasks like machine\ntranslation (Sutskever et al., 2014; Cho et al., 2014; Kalch-\nbrenner et al., 2014) or video generation (Srivastava et al.,\n2015a).\nDeep Learning and Recurrent Neural Networks (RNNs)\nhave fueled language modeling research in the past years\nas it allowed researchers to explore many tasks for which\nthe strong conditional independence assumptions are unre-\nalistic. Despite the fact that simpler models, such as N-\ngrams, only use a short history of previous words to predict\nthe next word, they are still a key component to high qual-\nity, low perplexity LMs. Indeed, most recent work on large\nscale LM has shown that RNNs are great in combination\nwith N-grams, as they may have different strengths that\ncomplement N-gram models, but worse when considered\nin isolation (Mikolov et al., 2011; Mikolov, 2012; Chelba\net al., 2013; Williams et al., 2015; Ji et al., 2015a; Shazeer\net al., 2015).\nWe believe that, despite much work being devoted to small\ndata sets like the Penn Tree Bank (PTB) (Marcus et al.,\n1993), research on larger tasks is very relevant as over\ufb01t-\nting is not the main limitation in current language model-\ning, but is the main characteristic of the PTB task. Results\non larger corpora usually show better what matters as many\nExploring the Limits of Language Modeling\nFigure 1. A high-level diagram of the models presented in this pa-\nper. (a) is a standard LSTM LM. (b) represents an LM where both\ninput and Softmax embeddings have been replaced by a character\nCNN. In (c) we replace the Softmax by a next character prediction\nLSTM network.\nlarger data sets. Further, given current hardware trends and\nvast amounts of text available on the Web, it is much more\nstraightforward to tackle large scale modeling than it used\nto be. Thus, we hope that our work will help and motivate\nresearchers to work on traditional LM beyond PTB \u2013 for\nthis purpose, we will open-source our models and training\nrecipes.\nWe focused on a well known, large scale LM benchmark:\nthe One Billion Word Benchmark data set (Chelba et al.,\n2013). This data set is much larger than PTB (one thou-\nsand fold, 800k word vocabulary and 1B words training\ndata) and far more challenging. Similar to Imagenet (Deng\net al., 2009), which helped advance computer vision, we\nbelieve that releasing and working on large data sets and\nmodels with clear benchmarks will help advance Language\nModeling.\nThe contributions of our work are as follows:\n\u000fWe explored, extended and tried to unify some of the\ncurrent research on large scale LM.\n\u000fSpeci\ufb01cally, we designed a Softmax loss which is\nbased on character level CNNs, is ef\ufb01cient to train,\nand is as precise as a full Softmax which has orders of\nmagnitude more parameters.\n\u000fOur study yielded signi\ufb01cant improvements to the\nstate-of-the-art on a well known, large scale LM task:\nfrom 51.3 down to 30.0 perplexity for single models\nwhilst reducing the number of parameters by a factor\nof 20.\u000fWe show that an ensemble of a number of different\nmodels can bring down perplexity on this task to 23.7,\na large improvement compared to current state-of-art.\n\u000fWe share the model and recipes in order to help and\nmotivate further research in this area.\nIn Section 2 we review important concepts and previous\nwork on language modeling. Section 3 presents our contri-\nbutions to the \ufb01eld of neural language modeling, emphasiz-\ning large scale recurrent neural network training. Sections\n4 and 5 aim at exhaustively describing our experience and\nunderstanding throughout the project, as well as emplacing\nour work relative to other known approaches.",
        "subsection": [
            {
                "id": "2.1.",
                "section": "Language models",
                "text": "Language Modeling (LM) has been a central task in NLP.\nThe goal of LM is to learn a probability distribution over\nsequences of symbols pertaining to a language. Much work\nhas been done on both parametric (e.g., log-linear models)\nand non-parametric approaches (e.g., count-based LMs).\nCount-based approaches (based on statistics of N-grams)\ntypically add smoothing which account for unseen (yet pos-\nsible) sequences, and have been quite successful. To this\nextent, Kneser-Ney smoothed 5-gram models (Kneser &\nNey, 1995) are a fairly strong baseline which, for large\namounts of training data, have challenged other paramet-\nric approaches based on Neural Networks (Bengio et al.,\n2006).\nMost of our work is based on Recurrent Neural Networks\n(RNN) models which retain long term dependencies. To\nthis extent, we used the Long-Short Term Memory model\n(Hochreiter & Schmidhuber, 1997) which uses a gating\nmechanism (Gers et al., 2000) to ensure proper propaga-\ntion of information through many time steps. Much work\nhas been done on small and large scale RNN-based LMs\n(Mikolov et al., 2010; Mikolov, 2012; Chelba et al., 2013;\nZaremba et al., 2014; Williams et al., 2015; Ji et al., 2015a;\nWang & Cho, 2015; Ji et al., 2015b). The architectures that\nwe considered in this paper are represented in Figure 1.\nIn our work, we train models on the popular One Bil-\nlion Word Benchmark, which can be considered to be a\nmedium-sized data set for count-based LMs but a very large\ndata set for NN-based LMs. This regime is most interesting\nto us as we believe learning a very good model of human\nExploring the Limits of Language Modeling\nand thus large amounts of data. Further advances in data\navailability and computational resources helped our study.\nWe argue this leap in scale enabled tremendous advances in\ndeep learning. A clear example found in computer vision is\nImagenet (Deng et al., 2009), which enabled learning com-\nplex vision models from large amounts of data (Krizhevsky\net al., 2012).\nA crucial aspect which we discuss in detail in later sections\nis the size of our models. Despite the large number of pa-\nrameters, we try to minimize computation as much as pos-\nsible by adopting a strategy proposed in (Sak et al., 2014)\nof projecting a relatively big recurrent state space down so\nthat the matrices involved remain relatively small, yet the\nmodel has large memory capacity.",
                "subsection": []
            },
            {
                "id": "2.2.",
                "section": "Convolutional embedding models",
                "text": "There is an increased interest in incorporating character-\nlevel inputs to build word embeddings for various NLP\nproblems, including part-of-speech tagging, parsing and\nlanguage modeling (Ling et al., 2015; Kim et al., 2015;\nBallesteros et al., 2015). The additional character informa-\ntion has been shown useful on relatively small benchmark\ndata sets.\nThe approach proposed in (Ling et al., 2015) builds word\nembeddings using bidirectional LSTMs (Schuster & Pali-\nwal, 1997; Graves & Schmidhuber, 2005) over the charac-\nters. The recurrent networks process sequences of charac-\nters from both sides and their \ufb01nal state vectors are concate-\nnated. The resulting representation is then fed to a Neural\nNetwork. This model achieved very good results on a part-\nof-speech tagging task.\nIn (Kim et al., 2015), the words characters are processed by\na 1-d CNN (Le Cun et al., 1990) with max-pooling across\nthe sequence for each convolutional feature. The result-\ning features are fed to a 2-layer highway network (Srivas-\ntava et al., 2015b), which allows the embedding to learn se-\nmantic representations. The model was evaluated on small-\nscale language modeling experiments for various languages\nand matched the best results on the PTB data set despite\nhaving 60% fewer parameters.",
                "subsection": []
            },
            {
                "id": "2.3.",
                "section": "Softmax over large vocabularies",
                "text": "Assigning probability distributions over large vocabularies\nis computationally challenging. For modeling language,\nmaximizing log-likelihood of a given word sequence leads\nto optimizing cross-entropy between the target probability\ndistribution (e.g., the target word we should be predicting),\nand our model predictions p. Generally, predictions come\nfrom a linear layer followed by a Softmax non-linearity:\np(w) =exp(zw) P\nw02Vexp(zw0)wherezwis the logit correspond-\ning to a word w. The logit is generally computed as aninner product zw=hTewwherehis a context vector and\newis a \u201cword embedding\u201d for w.\nThe main challenge when jVjis very large (in the order\nof one million in this paper) is the fact that computing\nall inner products between hand all embeddings becomes\nprohibitively slow during training (even when exploiting\nmatrix-matrix multiplications and modern GPUs). Several\napproaches have been proposed to cope with the scaling is-\nsue: importance sampling (Bengio et al., 2003; Bengio &\nSen\u00b4ecal, 2008), Noise Contrastive Estimation (NCE) (Gut-\nmann & Hyv \u00a8arinen, 2010; Mnih & Kavukcuoglu, 2013),\nself normalizing partition functions (Vincent et al., 2015)\nor Hierarchical Softmax (Morin & Bengio, 2005; Mnih &\nHinton, 2009) \u2013 they all offer good solutions to this prob-\nlem. We found importance sampling to be quite effective\non this task, and explain the connection between it and\nNCE in the following section, as they are closely related.",
                "subsection": []
            }
        ]
    },
    {
        "id": "2.",
        "section": "Related work",
        "text": "In this section we describe previous work relevant to the\napproaches discussed in this paper. A more detailed dis-\ncussion on language modeling research is provided in\n(Mikolov, 2012).",
        "subsection": [
            {
                "id": "3.1.",
                "section": "Relationship between noise contrastive",
                "text": "Estimation and Importance Sampling\nAs discussed in Section 2.3, a large scale Softmax is neces-\nsary for training good LMs because of the vocabulary size.\nA Hierarchical Softmax (Mnih & Hinton, 2009) employs\na tree in which the probability distribution over words is\ndecomposed into a product of two probabilities for each\nword, greatly reducing training and inference time as only\nthe path speci\ufb01ed by the hierarchy needs to be computed\nand updated. Choosing a good hierarchy is important for\nobtaining good results and we did not explore this approach\nfurther for this paper as sampling methods worked well for\nour setup.\nSampling approaches are only useful during training, as\nthey propose an approximation to the loss which is cheap to\ncompute (also in a distributed setting) \u2013 however, at infer-\nence time one still has to compute the normalization term\nover all words. Noise Contrastive Estimation (NCE) pro-\nposes to consider a surrogate binary classi\ufb01cation task in\nwhich a classi\ufb01er is trained to discriminate between true\ndata, or samples coming from some arbitrary distribution.\nExploring the Limits of Language Modeling\noptimal classi\ufb01er would be:\np(Y=truejw) =pd(w)\npd(w) +kpn(w)\nwhereYis the binary random variable indicating whether\nwcomes from the true data distribution, kis the number of\nnegative samples per positive word, and pdandpnare the\ndata and noise distribution respectively (we dropped any\ndependency on previous words for notational simplicity).\nIt is easy to show that if we train a logistic classi\ufb01er\np\u0012(Y=truejw) =\u001b(s\u0012(w;h)\u0000logkpn(w))where\u001b\nis the logistic function, then, p0(w) =softmax (s\u0012(w;h))\nis a good approximation of pd(w)(s\u0012is a logit which e.g.\nan LSTM LM computes).\nThe other technique, which is based on importance sam-\npling (IS), proposes to directly approximate the partition\nfunction (which comprises a sum over all words) with an\nestimate of it through importance sampling. Though the\nmethods look super\ufb01cially similar, we will derive a similar\nsurrogate classi\ufb01cation task akin to NCE which arrives at\nIS, showing a strong connection between the two.\nSuppose that, instead of having a binary task to decide if\na word comes from the data or from the noise distribution,\nwe want to identify the words coming from the true data\ndistribution in a set W=fw1;:::;wk+1g, comprised of\nknoise samples and one data distribution sample. Thus,\nwe can train a multiclass loss over a multinomial random\nvariableYwhich maximizes logp(Y= 1jW), assuming\nw.l.o.g. that w12Wis always the word coming from true\ndata. By Bayes rule, and ignoring terms that are constant\nwith respect to Y, we can write:\np(Y=kjW)/Ypd(wk)\npn(wk)\nand, following a similar argument than for NCE, if we de-\n\ufb01nep(Y=kjW) =softmax (s\u0012(wk)\u0000logpn(wk))then\np0(w) =softmax (s\u0012(w;h))is a good approximation of\npd(word ). Note that the only difference between NCE and\nIS is that, in NCE, we de\ufb01ne a binary classi\ufb01cation task\nbetween true or noise words with a logistic loss, whereas\nin IS we de\ufb01ne a multiclass classi\ufb01cation problem with a\nSoftmax and cross entropy loss. We hope that our deriva-\ntion helps clarify the similarities and differences between\nthe two. In particular, we observe that IS, as it optimizes\na multiclass classi\ufb01cation task (in contrast to solving a bi-\nnary task), may be a better choice. Indeed, the updates to\nthe logits with IS are tied whereas in NCE they are inde-\npendent.3.2. CNN Softmax\nThe character-level features allow for a smoother and com-\npact parametrization of the word embeddings. Recent ef-\nforts on small scale language modeling have used CNN\ncharacter embeddings for the input embeddings (Kim et al.,\n2015). Although not as straightforward, we propose an ex-\ntension to this idea to also reduce the number of param-\neters of the Softmax layer. Recall from Section 2.3 that\nthe Softmax computes a logit as zw=hTewwherehis\na context vector and ewthe word embedding. Instead of\nbuilding a matrix of jVj\u0002jhj(whose rows correspond to\new), we produce ewwith a CNN over the characters of was\new=CNN (charsw)\u2013 we call this a CNN Softmax. We\nused the same network architecture to dynamically gener-\nate the Softmax word embeddings without sharing the pa-\nrameters with the input word-embedding sub-network. For\ninference, the vectors ewcan be precomputed, so there is no\ncomputational complexity increase w.r.t. the regular Soft-\nmax.\nWe note that, when using an importance sampling loss such\nas the one described in Section 3.1, only a few logits have\nnon-zero gradient (those corresponding to the true and sam-\npled words). With a Softmax where eware independently\nlearned word embeddings, this is not a problem. But we\nobserved that, when using a CNN, all the logits become\ntied as the function mapping from wtoewis quite smooth.\nAs a result, a much smaller learning rate had to be used.\nEven with this, the model lacks capacity to differentiate\nbetween words that have very different meanings but that\nare spelled similarly. Thus, a reasonable compromise was\nto add a small correction factor which is learned per word,\nsuch that:\nzw=hTCNN (charsw) +hTMcorrw\nwhereMis a matrix projecting a low-dimensional embed-\nding vectorcorrwback up to the dimensionality of the pro-\njected LSTM hidden state of h. This amounts to adding a\nbottleneck linear layer, and brings the CNN Softmax much\ncloser to our best result, as can be seen in Table 1, where\nadding a 128-dim correction halves the gap between regu-\nlar and the CNN Softmax.\nAside from a big reduction in the number of parameters\nand incorporating morphological knowledge from words,\nthe other bene\ufb01t of this approach is that out-of-vocabulary\n(OOV) words can easily be scored. This may be useful for\nother problems such as Machine Translation where han-\ndling out-of-vocabulary words is very important (Luong\net al., 2014). This approach also allows parallel training\nover various data sets since the model is no longer explic-\nitly parametrized by the vocabulary size \u2013 or the language.\nThis has shown to help when using byte-level input embed-\nExploring the Limits of Language Modeling\nand we hope it will enable similar gains when used to map\nonto words.",
                "subsection": []
            },
            {
                "id": "3.3.",
                "section": "Char lstm predictions",
                "text": "The CNN Softmax layer can handle arbitrary words and is\nmuch more ef\ufb01cient in terms of number of parameters than\nthe full Softmax matrix. It is, though, still considerably\nslow, as to evaluate perplexities we need to compute the\npartition function. A class of models that solve this prob-\nlem more ef\ufb01ciently are character-level LSTMs (Sutskever\net al., 2011; Graves, 2013). They make predictions one\ncharacter at a time, thus allowing to compute probabili-\nties over a much smaller vocabulary. On the other hand,\nthese models are more dif\ufb01cult to train and seem to per-\nform worse even in small tasks like PTB (Graves, 2013).\nMost likely this is due to the sequences becoming much\nlonger on average as the LSTM reads the input character\nby character instead of word by word.\nThus, we combine the word and character-level models by\nfeeding a word-level LSTM hidden state hinto a small\nLSTM that predicts the target word one character at a time\n(see Figure 1(c)). In order to make the whole process rea-\nsonably ef\ufb01cient, we train the standard LSTM model un-\ntil convergence, freeze its weights, and replace the stan-\ndard word-level Softmax layer with the aforementioned\ncharacter-level LSTM.\nThe resulting model scales independently of vocabulary\nsize \u2013 both for training and inference. However, it does\nseem to be worse than regular and CNN Softmax \u2013 we are\nhopeful that further research will enable these models to\nreplace \ufb01xed vocabulary models whilst being computation-\nally attractive.",
                "subsection": []
            }
        ]
    },
    {
        "id": "3.",
        "section": "Language modeling improvements",
        "text": "Recurrent Neural Networks based LMs employ the chain\nrule to model joint probabilities over word sequences:\np(w1;:::;wN) =NY\ni=1p(wijw1;:::;wi\u00001)\nwhere the context of all previous words is encoded with an\nLSTM, and the probability over words uses a Softmax (see\nFigure 1(a)).",
        "subsection": [
            {
                "id": "4.1.",
                "section": "Data set",
                "text": "The experiments are performed on the 1B Word Bench-\nmark data set introduced by (Chelba et al., 2013), which is\na publicly available benchmark for measuring progress of\nstatistical language modeling. The data set contains about\n0.8B words with a vocabulary of 793471 words, including\nsentence boundary markers. All the sentences are shuf\ufb02ed\nand the duplicates are removed. The words that are out of\nvocabulary (OOV) are marked with a special UNK token\n(there are approximately 0.3% such words).4.2. Model Setup\nThe typical measure used for reporting progress in\nlanguage modeling is perplexity, which is the aver-\nage per-word log-probability on the holdout data set:\ne\u00001\nNP\nilnpwi. We follow the standard procedure and sum\nover all the words (including the end of sentence symbol).\nWe used the 1B Word Benchmark data set without any pre-\nprocessing. Given the shuf\ufb02ed sentences, they are input to\nthe network as a batch of independent streams of words.\nWhenever a sentence ends, a new one starts without any\npadding (thus maximizing the occupancy per batch).\nFor the models that consume characters as inputs or as tar-\ngets, each word is fed to the model as a sequence of charac-\nter IDs of preespeci\ufb01ed length (see Figure 1(b)). The words\nwere processed to include special begin and end of word to-\nkens and were padded to reach the expected length. I.e. if\nthe maximum word length was 10, the word \u201c cat\u201d would\nbe transformed to \u201c $cat\u02c6 \u201d due to the CNN model.\nIn our experiments we found that limiting the maximum\nword length in training to 50 was suf\ufb01cient to reach very\ngood results while 32 was clearly insuf\ufb01cient. We used\n256 characters in our vocabulary and the non-ascii symbols\nwere represented as a sequence of bytes.",
                "subsection": []
            },
            {
                "id": "4.3.",
                "section": "Model architecture",
                "text": "We evaluated many variations of RNN LM architectures.\nThese include the dimensionalities of the embedding lay-\ners, the state, projection sizes, and number of LSTM layers\nto use. Exhaustively trying all combinations would be ex-\ntremely time consuming for such a large data set, but our\n\ufb01ndings suggest that LSTMs with a projection layer (i.e.,\na bottleneck between hidden states as in (Sak et al., 2014))\ntrained with truncated BPTT (Williams & Peng, 1990) for\n20 steps performed well.\nFollowing (Zaremba et al., 2014) we use dropout (Srivas-\ntava, 2013) before and after every LSTM layer. The bi-\nases of LSTM forget gate were initialized to 1.0 (Jozefow-\nicz et al., 2015). The size of the models will be described\nin more detail in the following sections, and the choices\nof hyper-parameters will be released as open source upon\npublication.\nFor any model using character embedding CNNs, we\nclosely follow the architecture from (Kim et al., 2015). The\nonly important difference is that we use a larger number of\nconvolutional features of 4096 to give enough capacity to\nthe model. The resulting embedding is then linearly trans-\nformed to match the LSTM projection sizes. This allows it\nto match the performance of regular word embeddings but\nExploring the Limits of Language Modeling\nTable 1. Best results of single models on the 1B word benchmark. Our results are shown below previous work.\nMODEL TESTPERPLEXITY NUMBER OF PARAMS [BILLIONS ]\nSIGMOID -RNN-2048 (J I ET AL ., 2015 A) 68.3 4.1\nINTERPOLATED KN 5- GRAM , 1.1B N-GRAMS (CHELBA ET AL ., 2013) 67.6 1.76\nSPARSE NON-NEGATIVE MATRIX LM (S HAZEER ET AL ., 2015) 52.9 33\nRNN-1024 + M AXENT9-GRAM FEATURES (CHELBA ET AL ., 2013) 51.3 20\nLSTM-512-512 54.1 0.82\nLSTM-1024-512 48.2 0.82\nLSTM-2048-512 43.7 0.83\nLSTM-8192-2048 (N ODROPOUT ) 37.9 3.3\nLSTM-8192-2048 (50% D ROPOUT ) 32.2 3.3\n2-L AYER LSTM-8192-1024 (BIG LSTM) 30.6 1.8\nBIG LSTM+CNN I NPUTS 30.0 1.04\nBIG LSTM+CNN I NPUTS + CNN S OFTMAX 39.8 0.29\nBIG LSTM+CNN I NPUTS + CNN S OFTMAX + 128- DIM CORRECTION 35.8 0.39\nBIG LSTM+CNN I NPUTS + C HAR LSTM PREDICTIONS 47.9 0.23\nTable 2. Best results of ensembles on the 1B Word Benchmark.\nMODEL TESTPERPLEXITY\nLARGE ENSEMBLE (CHELBA ET AL ., 2013) 43.8\nRNN+KN-5 (W ILLIAMS ET AL ., 2015) 42.4\nRNN+KN-5 (J I ET AL ., 2015 A) 42.0\nRNN+SNM10- SKIP (SHAZEER ET AL ., 2015) 41.3\nLARGE ENSEMBLE (SHAZEER ET AL ., 2015) 41.0\nOUR10BEST LSTM MODELS (EQUAL WEIGHTS ) 26.3\nOUR10BEST LSTM MODELS (OPTIMAL WEIGHTS ) 26.1",
                "subsection": []
            },
            {
                "id": "4.4.",
                "section": "Training procedure",
                "text": "The models were trained until convergence with an Ada-\nGrad optimizer using a learning rate of 0.2. In all the exper-\niments the RNNs were unrolled for 20 steps without ever\nresetting the LSTM states. We used a batch size of 128.\nWe clip the gradients of the LSTM weights such that their\nnorm is bounded by 1.0 (Pascanu et al., 2012).\nUsing these hyper-parameters we found large LSTMs to be\nrelatively easy to train. The same learning rate was used in\nalmost all of the experiments. In a few cases we had to re-\nduce it by an order of magnitude. Unless otherwise stated,\nthe experiments were performed with 32 GPU workers and\nasynchronous gradient updates. Further details will be fully\nspeci\ufb01ed with the code upon publication.\nTraining a model for such large target vocabulary (793471\nwords) required to be careful with some details about the\napproximation to full Softmax using importance sampling.We used a large number of negative (or noise) samples:\n8192 such samples were drawn per step, but were shared\nacross all the target words in the batch (2560 total, i.e. 128\ntimes 20 unrolled steps). This results in multiplying (2560\nx 1024) times (1024 x (8192+1)) (instead of (2560 x 1024)\ntimes (1024 x 793471)), i.e. about 100-fold less computa-\ntion.",
                "subsection": []
            }
        ]
    },
    {
        "id": "4.",
        "section": "Experiments",
        "text": "All experiments were run using the TensorFlow system\n(Abadi et al., 2015), with the exception of some older mod-\nels which were used in the ensemble.",
        "subsection": [
            {
                "id": "5.1.",
                "section": "Size matters",
                "text": "Unsurprisingly, size matters: when training on a very large\nand complex data set, \ufb01tting the training data with an\nLSTM is fairly challenging. Thus, the size of the LSTM\nlayer is a very important factor that in\ufb02uences the results,\nas seen in Table 1. The best models are the largest we were\nable to \ufb01t into a GPU memory. Our largest model was a 2-\nlayer LSTM with 8192+1024 dimensional recurrent state\nin each of the layers. Increasing the embedding and projec-\ntion size also helps but causes a large increase in the num-\nber of parameters, which is less desirable. Lastly, training\nan RNN instead of an LSTM yields poorer results (about 5\nperplexity worse) for a comparable model size.",
                "subsection": []
            },
            {
                "id": "5.2.",
                "section": "Regularization importance",
                "text": "As shown in Table 1, using dropout improves the results.\nTo our surprise, even relatively small models (e.g., single\nlayer LSTM with 2048 units projected to 512 dimensional\noutputs) can over-\ufb01t the training set if trained long enough,\neventually yielding holdout set degradation.\nUsing dropout on non-recurrent connections largely miti-\ngates these issues. While over-\ufb01tting still occurs, there is\nno more need for early stopping. For models that had 4096\nor less units in the LSTM layer, we used 10% dropout prob-\nability. For larger models, 25% was signi\ufb01cantly better.\nEven with such regularization, perplexities on the training\nset can be as much as 6 points below test.\nIn one experiment we tried to use a smaller vocabulary\ncomprising of the 100,000 most frequent words and found\nthe difference between train and test to be smaller \u2013 which\nsuggests that too much capacity is given to rare words. This\nis less of an issue with character CNN embedding models\nas the embeddings are shared across all words.",
                "subsection": []
            },
            {
                "id": "5.3.",
                "section": "Importance sampling is data ef",
                "text": "Table 3 shows the test perplexities of NCE vs IS loss after a\nfew epochs of 2048 unit LSTM with 512 projection. The IS\nobjective signi\ufb01cantly improves the speed and the overall\nperformance of the model when compared to NCE.",
                "subsection": []
            },
            {
                "id": "5.4.",
                "section": "Word embeddings vs character cnn",
                "text": "Replacing the embedding layer with a parametrized neural\nnetwork that process characters of a given word allows the\nmodel to consume arbitrary words and is not restricted to\na \ufb01xed vocabulary. This property is useful for data sets\nwith conversational or informal text as well as for mor-\nphologically rich languages. Our experiments show thatTable 3. The test perplexities of an LSTM-2048-512 trained with\ndifferent losses versus number of epochs. The model needs about\n40 minutes per epoch. First epoch is a bit slower because we\nslowly increase the number of workers.\nEPOCHS NCE IS T RAINING TIME[HOURS ]\n1 97 60 1\n5 58 47.5 4\n10 53 45 8\n20 49 44 14\n50 46.1 43.7 34\nTable 4. Nearest neighbors in the character CNN embedding\nspace of a few out-of-vocabulary words. Even for words that\nthe model has never seen, the model usually still \ufb01nds reasonable\nneighbors.\nWORD TOP-1 T OP-2 T OP-3\nINCERDIBLE INCREDIBLE NONEDIBLE EXTENDIBLE\nWWW .A.COM WWW .AA.COM WWW .AAA .COM WWW .CA.COM\n7546 7646 7534 8566\nTOWN HAL1 T OWN HALL DJC2 M OODSWING 360\nKOMARSKI KOHARSKI KONARSKI KOMANSKI\nusing character-level embeddings is feasible and does not\ndegrade performance \u2013 in fact, our best single model uses\na Character CNN embedding.\nAn additional advantage is that the number of parameters of\nthe input layer is reduced by a factor of 11 (though training\nspeed is slightly worse). For inference, the embeddings\ncan be precomputed so there is no speed penalty. Overall,\nthe embedding of the best model is parametrized by 72M\nweights (down from 820M weights).\nTable 4 shows a few examples of nearest neighbor embed-\ndings for some out-of-vocabulary words when character\nCNNs are used.",
                "subsection": []
            },
            {
                "id": "5.5.",
                "section": "Smaller models with cnn softmax",
                "text": "Even with character-level embeddings, the model is still\nfairly large (though much smaller than the best competing\nmodels from previous work). Most of the parameters are in\nthe linear layer before the Softmax: 820M versus a total of\n1.04B parameters.\nIn one of the experiments we froze the word-LSTM after\nconvergence and replaced the Softmax layer with the CNN\nSoftmax sub-network. Without any \ufb01ne-tuning that model\nwas able to reach 39.8 perplexity with only 293M weights\n(as seen in Table 1).\nAs described in Section 3.2, adding a \u201ccorrection\u201d word\nExploring the Limits of Language Modeling\nCNN Softmax. Indeed, we can trade-off model size versus\nperplexity. For instance, by adding 100M weights (through\na 128 dimensional bottleneck embedding) we achieve 35.8\nperplexity (see Table 1).\nTo contrast with the CNN Softmax, we also evaluated a\nmodel that replaces the Softmax layer with a smaller LSTM\nthat predicts one character at a time (see Section 3.3). Such\na model does not have to learn long dependencies because\nthe base LSTM still operates at the word-level (see Fig-\nure 1(c)). With a single-layer LSTM of 1024 units we\nreached 49.0 test perplexity, far below the best model. In\norder to make the comparisons more fair, we performed a\nvery expensive marginalization over the words in the vo-\ncabulary (to rule out words not in the dictionary which the\ncharacter LSTM would assign some probability). When\ndoing this marginalization, the perplexity improved a bit\ndown to 47.9.\nWords buckets of equal size (less frequent words on the right)0.00.51.01.52.02.5Mean difference in log perplexity\nFigure 2. The difference in log probabilities between the best\nLSTM and KN-5 (higher is better). The words from the hold-\nout set are grouped into 25 buckets of equal size based on their\nfrequencies.",
                "subsection": []
            },
            {
                "id": "5.6.",
                "section": "Training speed",
                "text": "We used 32 Tesla K40 GPUs to train our models. The\nsmaller version of the LSTM model with 2048 units and\n512 projections needs less than 10 hours to reach below\n45 perplexity and after only 2 hours of training the model\nbeats previous state-of-the art on this data set. The best\nmodel needs about 5 days to get to 35 perplexity and 10\ndays to 32.5. The best results were achieved after 3 weeks\nof training. See Table 3 for more details.",
                "subsection": []
            },
            {
                "id": "5.7.",
                "section": "Ensembles",
                "text": "We averaged several of our best models and we were able\nto reach 23.7 test perplexity (more details and results can\nbe seen in Table 2), which is more than 40% improve-ment over previous work. Interestingly, including the best\nN-gram model reduces the perplexity by 1.2 point even\nthough the model is rather weak on its own (67.6 perplex-\nity). Most previous work had to either ensemble with the\nbest N-gram model (as their RNN only used a limited out-\nput vocabulary of a few thousand words), or use N-gram\nfeatures as additional input to the RNN. Our results, on\nthe contrary, suggest that N-grams are of limited bene\ufb01t,\nand suggest that a carefully trained LSTM LM is the most\ncompetitive model.",
                "subsection": []
            },
            {
                "id": "5.8.",
                "section": "Lstms are best on the tail words",
                "text": "Figure 2 shows the difference in log probabilities between\nour best model (at 30.0 perplexity) and the KN-5. As can be\nseen from the plot, the LSTM is better across all the buckets\nand signi\ufb01cantly outperforms KN-5 on the rare words. This\nis encouraging as it seems to suggest that LSTM LMs may\nfare even better for languages or data sets where the number\nof rare words is larger than traditional N-gram models.",
                "subsection": []
            },
            {
                "id": "5.9.",
                "section": "Samples from the model",
                "text": "To qualitatively evaluate the model, we sampled many sen-\ntences. We discarded short and politically incorrect ones,\nbut the sample shown below is otherwise \u201craw\u201d (i.e., not\nhand picked). The samples are of high quality \u2013 which is\nnot a surprise, given the perplexities attained \u2013 but there are\nstill some occasional mistakes.\nSentences generated by the ensemble (about 26 perplexity):\n< S > With even more new technologies coming onto the market\nquickly during the past three years , an increasing number of compa-\nnies now must tackle the ever-changing and ever-changing environ-\nmental challenges online . < S > Check back for updates on this\nbreaking news story . < S > About 800 people gathered at Hever\nCastle on Long Beach from noon to 2pm , three to four times that of\nthe funeral cort `ege .< S > We are aware of written instructions\nfrom the copyright holder not to , in any way , mention Rosenberg \u2019s\nnegative comments if they are relevant as indicated in the documents\n, \u201d eBay said in a statement . <S > It is now known that coffee and\ncacao products can do no harm on the body . < S > Yuri Zhirkov\nwas in attendance at the Stamford Bridge at the start of the second\nhalf but neither Drogba nor Malouda was able to push on through the\nBarcelona defence .",
                "subsection": []
            }
        ]
    },
    {
        "id": "10",
        "section": "Lstm s",
        "text": "",
        "subsection": []
    },
    {
        "id": "10",
        "section": "Lstm s",
        "text": "",
        "subsection": []
    },
    {
        "id": "10",
        "section": "Lstm s",
        "text": "",
        "subsection": []
    },
    {
        "id": "5.",
        "section": "Results and analysis",
        "text": "In this section we summarize the results of our experiments\nand do an in-depth analysis. Table 1 contains all results for\nour models compared to previously published work. Ta-\nble 2 shows previous and our own work on ensembles of\nmodels. We hope that our encouraging results, which im-\nproved the best perplexity of a single model from 51.3 to\n30.0 (whilst reducing the model size considerably), and set\na new record with ensembles at 23.7, will enable rapid re-\nExploring the Limits of Language Modeling\nthis purpose, we will release the model weights and recipes\nupon publication.",
        "subsection": []
    },
    {
        "id": "6.",
        "section": "Discussion and conclusions",
        "text": "In this paper we have shown that RNN LMs can be trained\non large amounts of data, and outperform competing mod-\nels including carefully tuned N-grams. The reduction in\nperplexity from 51.3 to 30.0 is due to several key compo-\nnents which we studied in this paper. Thus, a large, regular-\nized LSTM LM, with projection layers and trained with an\napproximation to the true Softmax with importance sam-\npling performs much better than N-grams. Unlike previ-\nous work, we do not require to interpolate both the RNN\nLM and the N-gram, and the gains of doing so are rather\nExploring the Limits of Language Modeling\nBy exploring recent advances in model architectures (e.g.\nLSTMs), exploiting small character CNNs, and by sharing\nour \ufb01ndings in this paper and accompanying code and mod-\nels (to be released upon publication), we hope to inspire\nresearch on large scale Language Modeling, a problem we\nconsider crucial towards language understanding. We hope\nfor future research to focus on reasonably sized datasets\ntaking inspiration from recent advances seen in the com-\nputer vision community thanks to efforts such as Imagenet\n(Deng et al., 2009).\nAcknowledgements\nWe thank Ciprian Chelba, Ilya Sutskever, and the Google\nBrain Team for their help and discussions. We also thank\nKoray Kavukcuoglu for his help with the manuscript.\nReferences\nAbadi, Mart \u00b4\u0131n, Agarwal, Ashish, Barham, Paul, Brevdo,\nEugene, Chen, Zhifeng, Citro, Craig, Corrado, Greg S.,\nDavis, Andy, Dean, Jeffrey, Devin, Matthieu, Ghe-\nmawat, Sanjay, Goodfellow, Ian, Harp, Andrew, Irv-\ning, Geoffrey, Isard, Michael, Jia, Yangqing, Jozefowicz,\nRafal, Kaiser, Lukasz, Kudlur, Manjunath, Levenberg,\nJosh, Man \u00b4e, Dan, Monga, Rajat, Moore, Sherry, Murray,\nDerek, Olah, Chris, Schuster, Mike, Shlens, Jonathon,\nSteiner, Benoit, Sutskever, Ilya, Talwar, Kunal, Tucker,\nPaul, Vanhoucke, Vincent, Vasudevan, Vijay, Vi \u00b4egas,\nFernanda, Vinyals, Oriol, Warden, Pete, Wattenberg,\nMartin, Wicke, Martin, Yu, Yuan, and Zheng, Xiaoqiang.\nTensorFlow: Large-scale machine learning on heteroge-\nneous systems, 2015. URL http://tensorflow.\norg/ . Software available from tensor\ufb02ow.org.\nArisoy, Ebru, Sainath, Tara N, Kingsbury, Brian, and Ram-\nabhadran, Bhuvana. Deep neural network language mod-\nels. In Proceedings of the NAACL-HLT 2012 Workshop:\nWill We Ever Really Replace the N-gram Model? On the\nFuture of Language Modeling for HLT , pp. 20\u201328. As-\nsociation for Computational Linguistics, 2012.\nBallesteros, Miguel, Dyer, Chris, and Smith, Noah A.\nImproved transition-based parsing by modeling char-\nacters instead of words with lstms. arXiv preprint\narXiv:1508.00657 , 2015.\nBengio, Yoshua and Sen \u00b4ecal, Jean-S \u00b4ebastien. Adaptive im-\nportance sampling to accelerate training of a neural prob-\nabilistic language model. Neural Networks, IEEE Trans-\nactions on , 19(4):713\u2013722, 2008.\nBengio, Yoshua, Sen \u00b4ecal, Jean-S \u00b4ebastien, et al. Quick\ntraining of probabilistic neural nets by importance sam-\npling. In AISTATS , 2003.Bengio, Yoshua, Schwenk, Holger, Sen \u00b4ecal, Jean-\nS\u00b4ebastien, Morin, Fr \u00b4ederic, and Gauvain, Jean-Luc.\nNeural probabilistic language models. In Innovations in\nMachine Learning , pp. 137\u2013186. Springer, 2006.\nChelba, Ciprian, Mikolov, Tomas, Schuster, Mike, Ge,\nQi, Brants, Thorsten, Koehn, Phillipp, and Robinson,\nTony. One billion word benchmark for measuring\nprogress in statistical language modeling. arXiv preprint\narXiv:1312.3005 , 2013.\nCho, Kyunghyun, Van Merri \u00a8enboer, Bart, Gulcehre,\nCaglar, Bahdanau, Dzmitry, Bougares, Fethi, Schwenk,\nHolger, and Bengio, Yoshua. Learning phrase represen-\ntations using rnn encoder-decoder for statistical machine\ntranslation. arXiv preprint arXiv:1406.1078 , 2014.\nDeng, Jia, Dong, Wei, Socher, Richard, Li, Li-Jia, Li, Kai,\nand Fei-Fei, Li. Imagenet: A large-scale hierarchical\nimage database. In Computer Vision and Pattern Recog-\nnition, 2009. CVPR 2009. IEEE Conference on , pp. 248\u2013",
        "subsection": []
    },
    {
        "id": "255.",
        "section": "Ieee",
        "text": "Filippova, Katja, Alfonseca, Enrique, Colmenares, Car-\nlos A, Kaiser, Lukasz, and Vinyals, Oriol. Sentence com-\npression by deletion with lstms. In Proceedings of the\n2015 Conference on Empirical Methods in Natural Lan-\nguage Processing , pp. 360\u2013368, 2015.\nGers, Felix A, Schmidhuber, J \u00a8urgen, and Cummins, Fred.\nLearning to forget: Continual prediction with lstm. Neu-\nral computation , 12(10):2451\u20132471, 2000.\nGillick, Dan, Brunk, Cliff, Vinyals, Oriol, and Subra-\nmanya, Amarnag. Multilingual language processing\nfrom bytes. arXiv preprint arXiv:1512.00103 , 2015.\nGraves, Alex. Generating sequences with recurrent neural\nnetworks. arXiv preprint arXiv:1308.0850 , 2013.\nGraves, Alex and Schmidhuber, J \u00a8urgen. Framewise\nphoneme classi\ufb01cation with bidirectional lstm and other\nneural network architectures. Neural Networks , 18(5):\n602\u2013610, 2005.\nGutmann, Michael and Hyv \u00a8arinen, Aapo. Noise-\ncontrastive estimation: A new estimation principle for\nunnormalized statistical models. In International Con-\nference on Arti\ufb01cial Intelligence and Statistics , pp. 297\u2013\n304, 2010.\nHochreiter, Sepp and Schmidhuber, J \u00a8urgen. Long short-\nterm memory. Neural computation , 9(8):1735\u20131780,\n1997.\nJi, Shihao, Vishwanathan, S. V . N., Satish, Nadathur, An-\nderson, Michael J., and Dubey, Pradeep. Blackout:\nExploring the Limits of Language Modeling\nwith very large vocabularies. CoRR , abs/1511.06909,\n2015a. URL http://arxiv.org/abs/1511.\n06909 .\nJi, Yangfeng, Cohn, Trevor, Kong, Lingpeng, Dyer, Chris,\nand Eisenstein, Jacob. Document context language mod-\nels.arXiv preprint arXiv:1511.03962 , 2015b.\nJozefowicz, Rafal, Zaremba, Wojciech, and Sutskever,\nIlya. An empirical exploration of recurrent network ar-\nchitectures. In Proceedings of the 32nd International\nConference on Machine Learning (ICML-15) , pp. 2342\u2013\n2350, 2015.\nKalchbrenner, Nal, Grefenstette, Edward, and Blunsom,\nPhil. A convolutional neural network for modelling sen-\ntences. arXiv preprint arXiv:1404.2188 , 2014.\nKim, Yoon, Jernite, Yacine, Sontag, David, and Rush,\nAlexander M. Character-aware neural language models.\narXiv preprint arXiv:1508.06615 , 2015.\nKneser, Reinhard and Ney, Hermann. Improved backing-\noff for m-gram language modeling. In Acoustics, Speech,\nand Signal Processing, 1995. ICASSP-95., 1995 Inter-\nnational Conference on , volume 1, pp. 181\u2013184. IEEE,\n1995.\nKrizhevsky, Alex, Sutskever, Ilya, and Hinton, Geoffrey E.\nImagenet classi\ufb01cation with deep convolutional neural\nnetworks. In Advances in neural information processing\nsystems , pp. 1097\u20131105, 2012.\nLe Cun, B Boser, Denker, John S, Henderson, D, Howard,\nRichard E, Hubbard, W, and Jackel, Lawrence D. Hand-\nwritten digit recognition with a back-propagation net-\nwork. In Advances in neural information processing sys-\ntems. Citeseer, 1990.\nLing, Wang, Lu \u00b4\u0131s, Tiago, Marujo, Lu \u00b4\u0131s, Astudillo,\nRam \u00b4on Fernandez, Amir, Silvio, Dyer, Chris, Black,\nAlan W, and Trancoso, Isabel. Finding function in form:\nCompositional character models for open vocabulary\nword representation. arXiv preprint arXiv:1508.02096 ,\n2015.\nLuong, Minh-Thang, Sutskever, Ilya, Le, Quoc V , Vinyals,\nOriol, and Zaremba, Wojciech. Addressing the rare word\nproblem in neural machine translation. arXiv preprint\narXiv:1410.8206 , 2014.\nMarcus, Mitchell P, Marcinkiewicz, Mary Ann, and San-\ntorini, Beatrice. Building a large annotated corpus of\nenglish: The penn treebank. Computational linguistics ,\n19(2):313\u2013330, 1993.\nMikolov, Tom \u00b4a\u02c7s. Statistical language models based on neu-\nral networks. Presentation at Google, Mountain View,\n2nd April , 2012.Mikolov, Tomas and Zweig, Geoffrey. Context dependent\nrecurrent neural network language model. In SLT, pp.\n234\u2013239, 2012.\nMikolov, Tomas, Kara\ufb01 \u00b4at, Martin, Burget, Lukas, Cer-\nnock `y, Jan, and Khudanpur, Sanjeev. Recurrent neural\nnetwork based language model. In INTERSPEECH , vol-\nume 2, pp. 3, 2010.\nMikolov, Tomas, Deoras, Anoop, Kombrink, Stefan, Bur-\nget, Lukas, and Cernock `y, Jan. Empirical evaluation and\ncombination of advanced language modeling techniques.\nInINTERSPEECH , number s 1, pp. 605\u2013608, 2011.\nMnih, Andriy and Hinton, Geoffrey E. A scalable hierar-\nchical distributed language model. In Advances in neural\ninformation processing systems , pp. 1081\u20131088, 2009.\nMnih, Andriy and Kavukcuoglu, Koray. Learning word\nembeddings ef\ufb01ciently with noise-contrastive estima-\ntion. In Advances in Neural Information Processing Sys-\ntems, pp. 2265\u20132273, 2013.\nMorin, Frederic and Bengio, Yoshua. Hierarchical proba-\nbilistic neural network language model. In Aistats , vol-\nume 5, pp. 246\u2013252. Citeseer, 2005.\nPascanu, Razvan, Mikolov, Tomas, and Bengio, Yoshua.\nOn the dif\ufb01culty of training recurrent neural networks.\narXiv preprint arXiv:1211.5063 , 2012.\nRush, Alexander M, Chopra, Sumit, and Weston, Jason. A\nneural attention model for abstractive sentence summa-\nrization. arXiv preprint arXiv:1509.00685 , 2015.\nSak, Hasim, Senior, Andrew W, and Beaufays, Franc \u00b8oise.\nLong short-term memory recurrent neural network archi-\ntectures for large scale acoustic modeling. In INTER-\nSPEECH , pp. 338\u2013342, 2014.\nSchuster, Mike and Paliwal, Kuldip K. Bidirectional recur-\nrent neural networks. Signal Processing, IEEE Transac-\ntions on , 45(11):2673\u20132681, 1997.\nSchwenk, Holger, Rousseau, Anthony, and Attik, Mo-\nhammed. Large, pruned or continuous space language\nmodels on a gpu for statistical machine translation. In\nProceedings of the NAACL-HLT 2012 Workshop: Will\nWe Ever Really Replace the N-gram Model? On the Fu-\nture of Language Modeling for HLT , pp. 11\u201319. Associ-\nation for Computational Linguistics, 2012.\nSerban, Iulian Vlad, Sordoni, Alessandro, Bengio, Yoshua,\nCourville, Aaron C., and Pineau, Joelle. Hierarchical\nneural network generative models for movie dialogues.\nCoRR , abs/1507.04808, 2015. URL http://arxiv.\norg/abs/1507.04808Exploring the Limits of Language Modeling\nShazeer, Noam, Pelemans, Joris, and Chelba, Ciprian.\nSparse non-negative matrix language modeling for skip-\ngrams. Proceedings of Interspeech , pp. 1428\u20131432,\n2015.\nSrivastava, Nitish. Improving neural networks with\ndropout . PhD thesis, University of Toronto, 2013.\nSrivastava, Nitish, Mansimov, Elman, and Salakhutdinov,\nRuslan. Unsupervised learning of video representations\nusing lstms. arXiv preprint arXiv:1502.04681 , 2015a.\nSrivastava, Rupesh K, Greff, Klaus, and Schmidhuber,\nJ\u00a8urgen. Training very deep networks. In Advances in\nNeural Information Processing Systems , pp. 2368\u20132376,\n2015b.\nSutskever, Ilya, Martens, James, and Hinton, Geoffrey E.\nGenerating text with recurrent neural networks. In Pro-\nceedings of the 28th International Conference on Ma-\nchine Learning (ICML-11) , pp. 1017\u20131024, 2011.\nSutskever, Ilya, Vinyals, Oriol, and Le, Quoc V . Se-\nquence to sequence learning with neural networks. In\nAdvances in neural information processing systems , pp.\n3104\u20133112, 2014.\nVaswani, Ashish, Zhao, Yinggong, Fossum, Victoria, and\nChiang, David. Decoding with large-scale neural lan-\nguage models improves translation. Citeseer.\nVincent, Pascal, de Br \u00b4ebisson, Alexandre, and Bouthillier,\nXavier. Ef\ufb01cient exact gradient update for training deep\nnetworks with very large sparse targets. In Advances in\nNeural Information Processing Systems , pp. 1108\u20131116,\n2015.\nVinyals, Oriol and Le, Quoc. A neural conversational\nmodel. arXiv preprint arXiv:1506.05869 , 2015.\nWang, Tian and Cho, Kyunghyun. Larger-context language\nmodelling. arXiv preprint arXiv:1511.03729 , 2015.\nWilliams, Ronald J and Peng, Jing. An ef\ufb01cient gradient-\nbased algorithm for on-line training of recurrent network\ntrajectories. Neural computation , 2(4):490\u2013501, 1990.\nWilliams, Will, Prasad, Niranjani, Mrva, David, Ash, Tom,\nand Robinson, Tony. Scaling recurrent neural network\nlanguage models. In Acoustics, Speech and Signal Pro-\ncessing (ICASSP), 2015 IEEE International Conference\non, pp. 5391\u20135395. IEEE, 2015.\nZaremba, Wojciech, Sutskever, Ilya, and Vinyals, Oriol.\nRecurrent neural network regularization. arXiv preprint\narXiv:1409.2329",
        "subsection": []
    },
    {
        "missing": []
    },
    {
        "references": []
    },
    {
        "title": "Exploring the Limits of Language Modeling",
        "arxiv_id": "1602.02410"
    }
]