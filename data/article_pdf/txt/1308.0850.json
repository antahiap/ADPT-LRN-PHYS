[
    {
        "id": "1",
        "section": "Introduction",
        "text": "Recurrent neural networks (RNNs) are a rich class of dynamic models that have\nbeen used to generate sequences in domains as diverse as music [6, 4], text [30]\nand motion capture data [29]. RNNs can be trained for sequence generation by\nprocessing real data sequences one step at a time and predicting what comes\nnext. Assuming the predictions are probabilistic, novel sequences can be gener-\nated from a trained network by iteratively sampling from the network's output\ndistribution, then feeding in the sample as input at the next step. In other\nwords by making the network treat its inventions as if they were real, much like\na person dreaming. Although the network itself is deterministic, the stochas-\nticity injected by picking samples induces a distribution over sequences. This\ndistribution is conditional, since the internal state of the network, and hence its\npredictive distribution, depends on the previous inputs.\nRNNs are `fuzzy' in the sense that they do not use exact templates from\nthe training data to make predictions, but rather|like other neural networks|\nuse their internal representation to perform a high-dimensional interpolation\nbetween training examples. This distinguishes them from n-gram models and\ncompression algorithms such as Prediction by Partial Matching [5], whose pre-\ndictive distributions are determined by counting exact matches between the\nrecent history and the training set. The result|which is immediately appar-\nent from the samples in this paper|is that RNNs (unlike template-based al-\ngorithms) synthesise and reconstitute the training data in a complex way, and\nrarely generate the same thing twice. Furthermore, fuzzy predictions do not suf-\nfer from the curse of dimensionality, and are therefore much better at modelling\nreal-valued or multivariate data than exact matches.\nIn principle a large enough RNN should be su\u000ecient to generate sequences\nof arbitrary complexity. In practice however, standard RNNs are unable to\nstore information about past inputs for very long [15]. As well as diminishing\ntheir ability to model long-range structure, this `amnesia' makes them prone to\ninstability when generating sequences. The problem (common to all conditional\ngenerative models) is that if the network's predictions are only based on the last\nfew inputs, and these inputs were themselves predicted by the network, it has\nlittle opportunity to recover from past mistakes. Having a longer memory has\na stabilising e\u000bect, because even if the network cannot make sense of its recent\nhistory, it can look further back in the past to formulate its predictions. The\nproblem of instability is especially acute with real-valued data, where it is easy\nfor the predictions to stray from the manifold on which the training data lies.\nOne remedy that has been proposed for conditional models is to inject noise into\nthe predictions before feeding them back into the model [31], thereby increasing\nthe model's robustness to surprising inputs. However we believe that a better\nmemory is a more profound and e\u000bective solution.\nLong Short-term Memory (LSTM) [16] is an RNN architecture designed to\nbe better at storing and accessing information than standard RNNs. LSTM has\nrecently given state-of-the-art results in a variety of sequence processing tasks,\nincluding speech and handwriting recognition [10, 12]. The main goal of this\npaper is to demonstrate that LSTM can use its memory to generate complex,\nrealistic sequences containing long-range structure.\nSection 2 de\fnes a `deep' RNN composed of stacked LSTM layers, and ex-\nplains how it can be trained for next-step prediction and hence sequence gener-\nation. Section 3 applies the prediction network to text from the Penn Treebank\nand Hutter Prize Wikipedia datasets. The network's performance is compet-\nitive with state-of-the-art language models, and it works almost as well when\npredicting one character at a time as when predicting one word at a time. The\nhighlight of the section is a generated sample of Wikipedia text, which showcases\nthe network's ability to model long-range dependencies. Section 4 demonstrates\nhow the prediction network can be applied to real-valued data through the use\nof a mixture density output layer, and provides experimental results on the IAM\nOnline Handwriting Database. It also presents generated handwriting samples\nproving the network's ability to learn letters and short words direct from pen\ntraces, and to model global features of handwriting style. Section 5 introduces\nan extension to the prediction network that allows it to condition its outputs on\na short annotation sequence whose alignment with the predictions is unknown.\nThis makes it suitable for handwriting synthesis, where a human user inputs\na text and the algorithm generates a handwritten version of it. The synthesis\nnetwork is trained on the IAM database, then used to generate cursive hand-\nwriting samples, some of which cannot be distinguished from real data by the\nFigure 1: Deep recurrent neural network prediction architecture. The\ncircles represent network layers, the solid lines represent weighted connections\nand the dashed lines represent predictions.\nnaked eye. A method for biasing the samples towards higher probability (and\ngreater legibility) is described, along with a technique for `priming' the sam-\nples on real data and thereby mimicking a particular writer's style. Finally,\nconcluding remarks and directions for future work are given in Section 6.",
        "subsection": []
    },
    {
        "id": "2",
        "section": "Prediction Network",
        "text": "Fig. 1 illustrates the basic recurrent neural network prediction architecture used\nin this paper. An input vector sequence x= (x1;:::;x T) is passed through\nweighted connections to a stack of Nrecurrently connected hidden layers to\ncompute \frst the hidden vector sequences hn= (hn\n1;:::;hn\nT) and then the\noutput vector sequence y= (y1;:::;y T). Each output vector ytis used to\nparameterise a predictive distribution Pr( xt+1jyt) over the possible next inputs\nxt+1. The \frst element x1of every input sequence is always a null vector whose\nentries are all zero; the network therefore emits a prediction for x2, the \frst\nreal input, with no prior information. The network is `deep' in both space\nand time, in the sense that every piece of information passing either vertically\nor horizontally through the computation graph will be acted on by multiple\nsuccessive weight matrices and nonlinearities.\nNote the `skip connections' from the inputs to all hidden layers, and from\nall hidden layers to the outputs. These make it easier to train deep networks,\nby reducing the number of processing steps between the bottom of the network\nand the top, and thereby mitigating the `vanishing gradient' problem [1]. In\nthe special case that N= 1 the architecture reduces to an ordinary, single layer\nnext step prediction RNN.\nThe hidden layer activations are computed by iterating the following equa-\ntions fromt= 1 toTand fromn= 2 toN:\nh1\nt=H\u0000\nWih1xt+Wh1h1h1\nt\u00001+b1\nh\u0001\n(1)\nhn\nt=H\u0000\nWihnxt+Whn\u00001hnhn\u00001\nt+Whnhnhn\nt\u00001+bn\nh\u0001\n(2)\nwhere the Wterms denote weight matrices (e.g. Wihnis the weight matrix\nconnecting the inputs to the nthhidden layer, Wh1h1is the recurrent connection\nat the \frst hidden layer, and so on), the bterms denote bias vectors (e.g. byis\noutput bias vector) and His the hidden layer function.\nGiven the hidden sequences, the output sequence is computed as follows:\n^yt=by+NX\nn=1Whnyhn\nt (3)\nyt=Y(^yt) (4)\nwhereYis the output layer function. The complete network therefore de\fnes\na function, parameterised by the weight matrices, from input histories x1:tto\noutput vectors yt.\nThe output vectors ytare used to parameterise the predictive distribution\nPr(xt+1jyt) for the next input. The form of Pr( xt+1jyt) must be chosen carefully\nto match the input data. In particular, \fnding a good predictive distribution\nfor high-dimensional, real-valued data (usually referred to as density modelling ),\ncan be very challenging.\nThe probability given by the network to the input sequence xis\nPr(x) =TY\nt=1Pr(xt+1jyt) (5)\nand the sequence loss L(x) used to train the network is the negative logarithm\nof Pr( x):\nL(x) =\u0000TX\nt=1log Pr(xt+1jyt) (6)\nThe partial derivatives of the loss with respect to the network weights can be\ne\u000eciently calculated with backpropagation through time [33] applied to the\ncomputation graph shown in Fig. 1, and the network can then be trained with\ngradient descent.",
        "subsection": [
            {
                "id": "2.1",
                "section": "Long Short-Term Memory",
                "text": "In most RNNs the hidden layer function His an elementwise application of a\nsigmoid function. However we have found that the Long Short-Term Memory\nFigure 2: Long Short-term Memory Cell\n(LSTM) architecture [16], which uses purpose-built memory cells to store infor-\nmation, is better at \fnding and exploiting long range dependencies in the data.\nFig. 2 illustrates a single LSTM memory cell. For the version of LSTM used in\nthis paper [7]His implemented by the following composite function:\nit=\u001b(Wxixt+Whiht\u00001+Wcict\u00001+bi) (7)\nft=\u001b(Wxfxt+Whfht\u00001+Wcfct\u00001+bf) (8)\nct=ftct\u00001+ittanh (Wxcxt+Whcht\u00001+bc) (9)\not=\u001b(Wxoxt+Whoht\u00001+Wcoct+bo) (10)\nht=ottanh(ct) (11)\nwhere\u001bis the logistic sigmoid function, and i,f,oandcare respectively the\ninput gate ,forget gate ,output gate ,celland cell input activation vectors, all of\nwhich are the same size as the hidden vector h. The weight matrix subscripts\nhave the obvious meaning, for example Whiis the hidden-input gate matrix,\nWxois the input-output gate matrix etc. The weight matrices from the cell\nto gate vectors (e.g. Wci) are diagonal, so element min each gate vector only\nreceives input from element mof the cell vector. The bias terms (which are\nadded toi,f,cando) have been omitted for clarity.\nThe original LSTM algorithm used a custom designed approximate gradi-\nent calculation that allowed the weights to be updated after every timestep [16].\nHowever the full gradient can instead be calculated with backpropagation through\ntime [11], the method used in this paper. One di\u000eculty when training LSTM\nwith the full gradient is that the derivatives sometimes become excessively large,\nleading to numerical problems. To prevent this, all the experiments in this pa-\nper clipped the derivative of the loss with respect to the network inputs to the\nLSTM layers (before the sigmoid and tanh functions are applied) to lie within\na prede\fned range1.",
                "subsection": []
            }
        ]
    },
    {
        "id": "3",
        "section": "Text Prediction",
        "text": "Text data is discrete, and is typically presented to neural networks using `one-\nhot' input vectors. That is, if there are Ktext classes in total, and class kis fed\nin at timet, thenxtis a length Kvector whose entries are all zero except for\nthekth, which is one. Pr( xt+1jyt) is therefore a multinomial distribution, which\ncan be naturally parameterised by a softmax function at the output layer:\nPr(xt+1=kjyt) =yk\nt=exp\u0000\n^yk\nt\u0001\nPK\nk0=1exp\u0000\n^yk0\nt\u0001 (12)\nSubstituting into Eq. (6) we see that\nL(x) =\u0000TX\nt=1logyxt+1\nt (13)\n=)@L(x)\n@^yk\nt=yk\nt\u0000\u000ek;xt+1 (14)\nThe only thing that remains to be decided is which set of classes to use. In\nmost cases, text prediction (usually referred to as language modelling ) is per-\nformed at the word level. Kis therefore the number of words in the dictionary.\nThis can be problematic for realistic tasks, where the number of words (in-\ncluding variant conjugations, proper names, etc.) often exceeds 100,000. As\nwell as requiring many parameters to model, having so many classes demands a\nhuge amount of training data to adequately cover the possible contexts for the\nwords. In the case of softmax models, a further di\u000eculty is the high computa-\ntional cost of evaluating all the exponentials during training (although several\nmethods have been to devised make training large softmax layers more e\u000ecient,\nincluding tree-based models [25, 23], low rank approximations [27] and stochas-\ntic derivatives [26]). Furthermore, word-level models are not applicable to text\ndata containing non-word strings, such as multi-digit numbers or web addresses.\nCharacter-level language modelling with neural networks has recently been\nconsidered [30, 24], and found to give slightly worse performance than equiv-\nalent word-level models. Nonetheless, predicting one character at a time is\nmore interesting from the perspective of sequence generation, because it allows\nthe network to invent novel words and strings. In general, the experiments in\nthis paper aim to predict at the \fnest granularity found in the data, so as to\nmaximise the generative \rexibility of the network.\n1In fact this technique was used in all my previous papers on LSTM, and in my publicly\navailable LSTM code, but I forgot to mention it anywhere| mea culpa .",
        "subsection": [
            {
                "id": "3.1",
                "section": "Penn Treebank Experiments",
                "text": "The \frst set of text prediction experiments focused on the Penn Treebank por-\ntion of the Wall Street Journal corpus [22]. This was a preliminary study whose\nmain purpose was to gauge the predictive power of the network, rather than to\ngenerate interesting sequences.\nAlthough a relatively small text corpus (a little over a million words in total),\nthe Penn Treebank data is widely used as a language modelling benchmark. The\ntraining set contains 930,000 words, the validation set contains 74,000 words and\nthe test set contains 82,000 words. The vocabulary is limited to 10,000 words,\nwith all other words mapped to a special `unknown word' token. The end-of-\nsentence token was included in the input sequences, and was counted in the\nsequence loss. The start-of-sentence marker was ignored, because its role is\nalready ful\flled by the null vectors that begin the sequences (c.f. Section 2).\nThe experiments compared the performance of word and character-level\nLSTM predictors on the Penn corpus. In both cases, the network architecture\nwas a single hidden layer with 1000 LSTM units. For the character-level network\nthe input and output layers were size 49, giving approximately 4.3M weights in\ntotal, while the word-level network had 10,000 inputs and outputs and around\n54M weights. The comparison is therefore somewhat unfair, as the word-level\nnetwork had many more parameters. However, as the dataset is small, both net-\nworks were easily able to over\ft the training data, and it is not clear whether the\ncharacter-level network would have bene\fted from more weights. All networks\nwere trained with stochastic gradient descent, using a learn rate of 0.0001 and a\nmomentum of 0.99. The LSTM derivates were clipped in the range [ \u00001;1] (c.f.\nSection 2.1).\nNeural networks are usually evaluated on test data with \fxed weights. For\nprediction problems however, where the inputs arethe targets, it is legitimate\nto allow the network to adapt its weights as it is being evaluated (so long as\nit only sees the test data once). Mikolov refers to this as dynamic evaluation .\nDynamic evaluation allows for a fairer comparison with compression algorithms,\nfor which there is no division between training and test sets, as all data is only\npredicted once.\nSince both networks over\ft the training data, we also experiment with two\ntypes of regularisation: weight noise [18] with a std. deviation of 0.075 applied\nto the network weights at the start of each training sequence, and adaptive\nweight noise [8], where the variance of the noise is learned along with the weights\nusing a Minimum description Length (or equivalently, variational inference) loss\nfunction. When weight noise was used, the network was initialised with the\n\fnal weights of the unregularised network. Similarly, when adaptive weight\nnoise was used, the weights were initialised with those of the network trained\nwith weight noise. We have found that retraining with iteratively increased\nregularisation is considerably faster than training from random weights with\nregularisation. Adaptive weight noise was found to be prohibitively slow for\nthe word-level network, so it was regularised with \fxed-variance weight noise\nonly. One advantage of adaptive weight is that early stopping is not needed\nTable 1: Penn Treebank Test Set Results. `BPC' is bits-per-character.\n`Error' is next-step classi\fcation error rate, for either characters or words.\nInput Regularisation Dynamic BPC Perplexity Error (%) Epochs\nChar none no 1.32 167 28.5 9\nchar none yes 1.29 148 28.0 9\nchar weight noise no 1.27 140 27.4 25\nchar weight noise yes 1.24 124 26.9 25\nchar adapt. wt. noise no 1.26 133 27.4 26\nchar adapt. wt. noise yes 1.24 122 26.9 26\nword none no 1.27 138 77.8 11\nword none yes 1.25 126 76.9 11\nword weight noise no 1.25 126 76.9 14\nword weight noise yes 1.23 117 76.2 14\n(the network can safely be stopped at the point of minimum total `description\nlength' on the training data). However, to keep the comparison fair, the same\ntraining, validation and test sets were used for all experiments.\nThe results are presented with two equivalent metrics: bits-per-character\n(BPC), which is the average value of \u0000log2Pr(xt+1jyt) over the whole test set;\nandperplexity which is two to the power of the average number of bits per word\n(the average word length on the test set is about 5.6 characters, so perplexity \u0019\n25:6BPC). Perplexity is the usual performance measure for language modelling.\nTable 1 shows that the word-level RNN performed better than the character-\nlevel network, but the gap appeared to close when regularisation is used. Overall\nthe results compare favourably with those collected in Tomas Mikolov's the-\nsis [23]. For example, he records a perplexity of 141 for a 5-gram with Keyser-\nNey smoothing, 141.8 for a word level feedforward neural network, 131.1 for the\nstate-of-the-art compression algorithm PAQ8 and 123.2 for a dynamically eval-\nuated word-level RNN. However by combining multiple RNNs, a 5-gram and a\ncache model in an ensemble, he was able to achieve a perplexity of 89.4. Inter-\nestingly, the bene\ft of dynamic evaluation was far more pronounced here than\nin Mikolov's thesis (he records a perplexity improvement from 124.7 to 123.2\nwith word-level RNNs). This suggests that LSTM is better at rapidly adapting\nto new data than ordinary RNNs.",
                "subsection": []
            },
            {
                "id": "3.2",
                "section": "Wikipedia Experiments",
                "text": "In 2006 Marcus Hutter, Jim Bowery and Matt Mahoney organised the following\nchallenge, commonly known as Hutter prize [17]: to compress the \frst 100\nmillion bytes of the complete English Wikipedia data (as it was at a certain\ntime on March 3rd 2006) to as small a \fle as possible. The \fle had to include\nnot only the compressed data, but also the code implementing the compression\nalgorithm. Its size can therefore be considered a measure of the minimum\ndescription length [13] of the data using a two part coding scheme.\nWikipedia data is interesting from a sequence generation perspective because\nit contains not only a huge range of dictionary words, but also many character\nsequences that would not be included in text corpora traditionally used for\nlanguage modelling. For example foreign words (including letters from non-\nLatin alphabets such as Arabic and Chinese), indented XML tags used to de\fne\nmeta-data, website addresses, and markup used to indicate page formatting such\nas headings, bullet points etc. An extract from the Hutter prize dataset is shown\nin Figs. 3 and 4.\nThe \frst 96M bytes in the data were evenly split into sequences of 100 bytes\nand used to train the network, with the remaining 4M were used for validation.\nThe data contains a total of 205 one-byte unicode symbols. The total number\nofcharacters is much higher, since many characters (especially those from non-\nLatin languages) are de\fned as multi-symbol sequences. In keeping with the\nprinciple of modelling the smallest meaningful units in the data, the network\npredicted a single byte at a time, and therefore had size 205 input and output\nlayers.\nWikipedia contains long-range regularities, such as the topic of an article,\nwhich can span many thousand words. To make it possible for the network to\ncapture these, its internal state (that is, the output activations htof the hidden\nlayers, and the activations ctof the LSTM cells within the layers) were only reset\nevery 100 sequences. Furthermore the order of the sequences was not shu\u000fed\nduring training, as it usually is for neural networks. The network was therefore\nable to access information from up to 10K characters in the past when making\npredictions. The error terms were only backpropagated to the start of each 100\nbyte sequence, meaning that the gradient calculation was approximate. This\nform of truncated backpropagation has been considered before for RNN lan-\nguage modelling [23], and found to speed up training (by reducing the sequence\nlength and hence increasing the frequency of stochastic weight updates) without\na\u000becting the network's ability to learn long-range dependencies.\nA much larger network was used for this data than the Penn data (re\recting\nthe greater size and complexity of the training set) with seven hidden layers of\n700 LSTM cells, giving approximately 21.3M weights. The network was trained\nwith stochastic gradient descent, using a learn rate of 0.0001 and a momentum\nof 0.9. It took four training epochs to converge. The LSTM derivates were\nclipped in the range [ \u00001;1].\nAs with the Penn data, we tested the network on the validation data with\nand without dynamic evaluation (where the weights are updated as the data\nis predicted). As can be seen from Table 2 performance was much better with\ndynamic evaluation. This is probably because of the long range coherence of\nWikipedia data; for example, certain words are much more frequent in some\narticles than others, and being able to adapt to this during evaluation is ad-\nvantageous. It may seem surprising that the dynamic results on the validation\nset were substantially better than on the training set. However this is easily\nexplained by two factors: \frstly, the network under\ft the training data, and\nsecondly some portions of the data are much more di\u000ecult than others (for\nexample, plain text is harder to predict than XML tags).\nTo put the results in context, the current winner of the Hutter Prize (a\nTable 2: Wikipedia Results (bits-per-character)\nTrain Validation (static) Validation (dynamic)\n1.42 1.67 1.33\nvariant of the PAQ-8 compression algorithm [20]) achieves 1.28 BPC on the same\ndata (including the code required to implement the algorithm), mainstream\ncompressors such as zip generally get more than 2, and a character level RNN\napplied to a text-only version of the data (i.e. with all the XML, markup tags\netc. removed) achieved 1.54 on held-out data, which improved to 1.47 when the\nRNN was combined with a maximum entropy model [24].\nA four page sample generated by the prediction network is shown in Figs. 5\nto 8. The sample shows that the network has learned a lot of structure from\nthe data, at a wide range of di\u000berent scales. Most obviously, it has learned a\nlarge vocabulary of dictionary words, along with a subword model that enables\nit to invent feasible-looking words and names: for example \\Lochroom River\",\n\\Mughal Ralvaldens\", \\submandration\", \\swalloped\". It has also learned basic\npunctuation, with commas, full stops and paragraph breaks occurring at roughly\nthe right rhythm in the text blocks.\nBeing able to correctly open and close quotation marks and parentheses is\na clear indicator of a language model's memory, because the closure cannot be\npredicted from the intervening text, and hence cannot be modelled with short-\nrange context [30]. The sample shows that the network is able to balance not\nonly parentheses and quotes, but also formatting marks such as the equals signs\nused to denote headings, and even nested XML tags and indentation.\nThe network generates non-Latin characters such as Cyrillic, Chinese and\nArabic, and seems to have learned a rudimentary model for languages other\nthan English (e.g. it generates \\es:Geotnia slago\" for the Spanish `version' of an\narticle, and \\nl:Rodenbaueri\" for the Dutch one) It also generates convincing\nlooking internet addresses (none of which appear to be real).\nThe network generates distinct, large-scale regions, such as XML headers,\nbullet-point lists and article text. Comparison with Figs. 3 and 4 suggests that\nthese regions are a fairly accurate re\rection of the constitution of the real data\n(although the generated versions tend to be somewhat shorter and more jumbled\ntogether). This is signi\fcant because each region may span hundreds or even\nthousands of timesteps. The fact that the network is able to remain coherent\nover such large intervals (even putting the regions in an approximately correct\norder, such as having headers at the start of articles and bullet-pointed `see also'\nlists at the end) is testament to its long-range memory.\nAs with all text generated by language models, the sample does not make\nsense beyond the level of short phrases. The realism could perhaps be improved\nwith a larger network and/or more data. However, it seems futile to expect\nmeaningful language from a machine that has never been exposed to the sensory\nworld to which language refers.\nLastly, the network's adaptation to recent sequences during training (which\nallows it to bene\ft from dynamic evaluation) can be clearly observed in the\nextract. The last complete article before the end of the training set (at which\npoint the weights were stored) was on intercontinental ballistic missiles. The\nin\ruence of this article on the network's language model can be seen from the\nprofusion of missile-related terms. Other recent topics include `Individual An-\narchism', the Italian writer Italo Calvino and the International Organization\nfor Standardization (ISO), all of which make themselves felt in the network's\nvocabulary.\n_(moon)|Enceladus]], a moon oFigure 3: Real Wikipedia data\nFigure 4: Real Wikipedia data (cotd.)\nFigure 5: Generated Wikipedia data.\n\u0101Figure 6: Generated Wikipedia data (cotd.)\n\u3925\u0005\u35c1\u372a\u048d\u0377\r\u152b]]                                                                 \u0d07\u3646\u081b\u3b99\u09bc \u0a2c\u0a4c]]                                                                 \u041c\u043b\u043a\u0440\u0430\u043a\u044f\u043d\u0473\u0435\u043b\u043e\u043b\u05db\u0443\u0446\u0438\u044f\u043d\u0441\u044c\u043d\u0438\u044f \u0430\u0433\u043c\u043e\u0440\u0435\u043b\u0438\u0430]]                                       \u014d]]                                                 \u0011\t\f\u0002\b\u0017\u0007]]</text>                                                           Figure 7: Generated Wikipedia data (cotd.)\n\u0012 submarine&quot; is [[building|corruptable]],Figure 8: Generated Wikipedia data (cotd.)",
                "subsection": []
            }
        ]
    },
    {
        "id": "4",
        "section": "Handwriting Prediction",
        "text": "To test whether the prediction network could also be used to generate convincing\nreal-valued sequences, we applied it to online handwriting data ( online in this\ncontext means that the writing is recorded as a sequence of pen-tip locations,\nas opposed to o\u000fine handwriting, where only the page images are available).\nOnline handwriting is an attractive choice for sequence generation due to its\nlow dimensionality (two real numbers per data point) and ease of visualisation.\nAll the data used for this paper were taken from the IAM online handwriting\ndatabase (IAM-OnDB) [21]. IAM-OnDB consists of handwritten lines collected\nfrom 221 di\u000berent writers using a `smart whiteboard'. The writers were asked to\nwrite forms from the Lancaster-Oslo-Bergen text corpus [19], and the position\nof their pen was tracked using an infra-red device in the corner of the board.\nSamples from the training data are shown in Fig. 9. The original input data\nconsists of the xandypen co-ordinates and the points in the sequence when\nthe pen is lifted o\u000b the whiteboard. Recording errors in the x;ydata was\ncorrected by interpolating to \fll in for missing readings, and removing steps\nwhose length exceeded a certain threshold. Beyond that, no preprocessing was\nused and the network was trained to predict the x;yco-ordinates and the end-\nof-stroke markers one point at a time. This contrasts with most approaches to\nhandwriting recognition and synthesis, which rely on sophisticated preprocessing\nand feature-extraction techniques. We eschewed such techniques because they\ntend to reduce the variation in the data (e.g. by normalising the character size,\nslant, skew and so-on) which we wanted the network to model. Predicting the\npen traces one point at a time gives the network maximum \rexibility to invent\nnovel handwriting, but also requires a lot of memory, with the average letter\noccupying more than 25 timesteps and the average line occupying around 700.\nPredicting delayed strokes (such as dots for `i's or crosses for `t's that are added\nafter the rest of the word has been written) is especially demanding.\nIAM-OnDB is divided into a training set, two validation sets and a test\nset, containing respectively 5364, 1438, 1518 and 3859 handwritten lines taken\nfrom 775, 192, 216 and 544 forms. For our experiments, each line was treated\nas a separate sequence (meaning that possible dependencies between successive\nlines were ignored). In order to maximise the amount of training data, we used\nthe training set, test set and the larger of the validation sets for training and\nthe smaller validation set for early-stopping. The lack of independent test set\nmeans that the recorded results may be somewhat over\ft on the validation set;\nhowever the validation results are of secondary importance, since no benchmark\nresults exist and the main goal was to generate convincing-looking handwriting.\nThe principal challenge in applying the prediction network to online hand-\nwriting data was determining a predictive distribution suitable for real-valued\ninputs. The following section describes how this was done.\nFigure 9: Training samples from the IAM online handwriting database.\nNotice the wide range of writing styles, the variation in line angle and character\nsizes, and the writing and recording errors, such as the scribbled out letters in\nthe \frst line and the repeated word in the \fnal line.",
        "subsection": [
            {
                "id": "4.1",
                "section": "Mixture Density Outputs",
                "text": "The idea of mixture density networks [2, 3] is to use the outputs of a neural\nnetwork to parameterise a mixture distribution. A subset of the outputs are\nused to de\fne the mixture weights, while the remaining outputs are used to\nparameterise the individual mixture components. The mixture weight outputs\nare normalised with a softmax function to ensure they form a valid discrete dis-\ntribution, and the other outputs are passed through suitable functions to keep\ntheir values within meaningful range (for example the exponential function is\ntypically applied to outputs used as scale parameters, which must be positive).\nMixture density network are trained by maximising the log probability den-\nsity of the targets under the induced distributions. Note that the densities are\nnormalised (up to a \fxed constant) and are therefore straightforward to di\u000ber-\nentiate and pick unbiased sample from, in contrast with restricted Boltzmann\nmachines [14] and other undirected models.\nMixture density outputs can also be used with recurrent neural networks [28].\nIn this case the output distribution is conditioned not only on the current input,\nbut on the history of previous inputs. Intuitively, the number of components is\nthe number of choices the network has for the next output given the inputs so\nfar.\nFor the handwriting experiments in this paper, the basic RNN architecture\nand update equations remain unchanged from Section 2. Each input vector xt\nconsists of a real-valued pair x1;x2that de\fnes the pen o\u000bset from the previous\ninput, along with a binary x3that has value 1 if the vector ends a stroke (that\nis, if the pen was lifted o\u000b the board before the next vector was recorded) and\nvalue 0 otherwise. A mixture of bivariate Gaussians was used to predict x1\nandx2, while a Bernoulli distribution was used for x3. Each output vector yt\ntherefore consists of the end of stroke probability e, along with a set of means\n\u0016j, standard deviations \u001bj, correlations \u001ajand mixture weights \u0019jfor theM\nmixture components. That is\nxt2R\u0002R\u0002f0;1g (15)\nyt=\u0010\net;f\u0019j\nt;\u0016j\nt;\u001bj\nt;\u001aj\ntgM\nj=1\u0011\n(16)\nNote that the mean and standard deviation are two dimensional vectors, whereas\nthe component weight, correlation and end-of-stroke probability are scalar. The\nvectorsytare obtained from the network outputs ^ yt, where\n^yt=\u0010\n^et;f^wj\nt;^\u0016j\nt;^\u001bj\nt;^\u001aj\ntgM\nj=1\u0011\n=by+NX\nn=1Whnyhn\nt (17)\nas follows:\net=1\n1 + exp (^et)=)et2(0;1) (18)\n\u0019j\nt=exp\u0010\n^\u0019j\nt\u0011\nPM\nj0=1exp\u0010\n^\u0019j0\nt\u0011 =)\u0019j\nt2(0;1);X\nj\u0019j\nt= 1 (19)\n\u0016j\nt= ^\u0016j\nt =)\u0016j\nt2R (20)\n\u001bj\nt= exp\u0010\n^\u001bj\nt\u0011\n=)\u001bj\nt>0 (21)\n\u001aj\nt=tanh(^\u001aj\nt) = )\u001aj\nt2(\u00001;1) (22)\nThe probability density Pr( xt+1jyt) of the next input xt+1given the output\nvectorytis de\fned as follows:\nPr(xt+1jyt) =MX\nj=1\u0019j\ntN(xt+1j\u0016j\nt;\u001bj\nt;\u001aj\nt)(\net if (xt+1)3= 1\n1\u0000etotherwise(23)\nwhere\nN(xj\u0016;\u001b;\u001a ) =1\n2\u0019\u001b1\u001b2p\n1\u0000\u001a2exp\u0014\u0000Z\n2(1\u0000\u001a2)\u0015\n(24)\nwith\nZ=(x1\u0000\u00161)2\n\u001b2\n1+(x2\u0000\u00162)2\n\u001b2\n2\u00002\u001a(x1\u0000\u00161)(x2\u0000\u00162)\n\u001b1\u001b2(25)\nThis can be substituted into Eq. (6) to determine the sequence loss (up to\na constant that depends only on the quantisation of the data and does not\nin\ruence network training):\nL(x) =TX\nt=1\u0000log0\n@X\nj\u0019j\ntN(xt+1j\u0016j\nt;\u001bj\nt;\u001aj\nt)1\nA\u0000(\nloget if (xt+1)3= 1\nlog(1\u0000et) otherwise\n(26)\nThe derivative of the loss with respect to the end-of-stroke outputs is straight-\nforward:\n@L(x)\n@^et= (xt+1)3\u0000et (27)\nThe derivatives with respect to the mixture density outputs can be found by\n\frst de\fning the component responsibilities \rj\nt:\n^\rj\nt=\u0019j\ntN(xt+1j\u0016j\nt;\u001bj\nt;\u001aj\nt) (28)\n\rj\nt=^\rj\ntPM\nj0=1^\rj0\nt(29)\nThen observing that\n@L(x)\n@^\u0019j\nt=\u0019j\nt\u0000\rj\nt (30)\n@L(x)\n@(^\u0016j\nt;^\u001bj\nt;^\u001aj\nt)=\u0000\rj\nt@logN(xt+1j\u0016j\nt;\u001bj\nt;\u001aj\nt)\n@(^\u0016j\nt;^\u001bj\nt;^\u001aj\nt)(31)\nwhere\n@logN(xj\u0016;\u001b;\u001a )\n@^\u00161=C\n\u001b1\u0012x1\u0000\u00161\n\u001b1\u0000\u001a(x2\u0000\u00162)\n\u001b2\u0013\n(32)\n@logN(xj\u0016;\u001b;\u001a )\n@^\u00162=C\n\u001b2\u0012x2\u0000\u00162\n\u001b2\u0000\u001a(x1\u0000\u00161)\n\u001b1\u0013\n(33)\n@logN(xj\u0016;\u001b;\u001a )\n@^\u001b1=C(x1\u0000\u00161)\n\u001b1\u0012x1\u0000\u00161\n\u001b1\u0000\u001a(x2\u0000\u00162)\n\u001b2\u0013\n\u00001 (34)\n@logN(xj\u0016;\u001b;\u001a )\n@^\u001b2=C(x2\u0000\u00162)\n\u001b2\u0012x2\u0000\u00162\n\u001b2\u0000\u001a(x1\u0000\u00161)\n\u001b1\u0013\n\u00001 (35)\n@logN(xj\u0016;\u001b;\u001a )\n@^\u001a=(x1\u0000\u00161)(x2\u0000\u00162)\n\u001b1\u001b2+\u001a(1\u0000CZ) (36)\nwithZde\fned as in Eq. (25) and\nC=1\n1\u0000\u001a2(37)\nFig. 10 illustrates the operation of a mixture density output layer applied to\nonline handwriting prediction.\nOutput Density\nFigure 10: Mixture density outputs for handwriting prediction. The\ntop heatmap shows the sequence of probability distributions for the predicted\npen locations as the word `under' is written. The densities for successive\npredictions are added together, giving high values where the distributions\noverlap.\nTwo types of prediction are visible from the density map: the small\nblobs that spell out the letters are the predictions as the strokes are being\nwritten, the three large blobs are the predictions at the ends of the strokes for\nthe \frst point in the next stroke. The end-of-stroke predictions have much\nhigher variance because the pen position was not recorded when it was o\u000b the\nwhiteboard, and hence there may be a large distance between the end of one\nstroke and the start of the next.\nThe bottom heatmap shows the mixture component weights during the\nsame sequence. The stroke ends are also visible here, with the most active\ncomponents switching o\u000b in three places, and other components switching on:\nevidently end-of-stroke predictions use a di\u000berent set of mixture components\nfrom in-stroke predictions.",
                "subsection": []
            },
            {
                "id": "4.2",
                "section": "Experiments",
                "text": "Each point in the data sequences consisted of three numbers: the xandyo\u000bset\nfrom the previous point, and the binary end-of-stroke feature. The network\ninput layer was therefore size 3. The co-ordinate o\u000bsets were normalised to\nmean 0, std. dev. 1 over the training set. 20 mixture components were used\nto model the o\u000bsets, giving a total of 120 mixture parameters per timestep\n(20 weights, 40 means, 40 standard deviations and 20 correlations). A further\nparameter was used to model the end-of-stroke probability, giving an output\nlayer of size 121. Two network architectures were compared for the hidden\nlayers: one with three hidden layers, each consisting of 400 LSTM cells, and one\nwith a single hidden layer of 900 LSTM cells. Both networks had around 3.4M\nweights. The three layer network was retrained with adaptive weight noise [8],\nwith all std. devs. initialised to 0.075. Training with \fxed variance weight noise\nproved ine\u000bective, probably because it prevented the mixture density layer from\nusing precisely speci\fed weights.\nThe networks were trained with rmsprop , a form of stochastic gradient de-\nscent where the gradients are divided by a running average of their recent mag-\nnitude [32]. De\fne \u000fi=@L(x)\n@wiwherewiis network weight i. The weight update\nequations were:\nni=@ni+ (1\u0000@)\u000f2\ni (38)\ngi=@gi+ (1\u0000@)\u000fi (39)\n\u0001i=i\u0001i\u0000j\u000fip\nni\u0000g2\ni+k(40)\nwi=wi+ \u0001 i (41)\nwith the following parameters:\n@= 0:95 (42)\ni= 0:9 (43)\nj= 0:0001 (44)\nk= 0:0001 (45)\nThe output derivatives@L(x)\n@^ytwere clipped in the range [ \u0000100;100], and the\nLSTM derivates were clipped in the range [ \u000010;10]. Clipping the output gradi-\nents proved vital for numerical stability; even so, the networks sometimes had\nnumerical problems late on in training, after they had started over\ftting on the\ntraining data.\nTable 3 shows that the three layer network had an average per-sequence loss\n15.3 nats lower than the one layer net. However the sum-squared-error was\nslightly lower for the single layer network. the use of adaptive weight noise\nreduced the loss by another 16.7 nats relative to the unregularised three layer\nnetwork, but did not signi\fcantly change the sum-squared error. The adaptive\nweight noise network appeared to generate the best samples.\nTable 3: Handwriting Prediction Results. All results recorded on the val-\nidation set. `Log-Loss' is the mean value of L(x) (in nats). `SSE' is the mean\nsum-squared-error per data point.\nNetwork Regularisation Log-Loss SSE\n1 layer none -1025.7 0.40\n3 layer none -1041.0 0.41\n3 layer adaptive weight noise -1057.7 0.41",
                "subsection": []
            },
            {
                "id": "4.3",
                "section": "Samples",
                "text": "Fig. 11 shows handwriting samples generated by the prediction network. The\nnetwork has clearly learned to model strokes, letters and even short words (es-\npecially common ones such as `of' and `the'). It also appears to have learned a\nbasic character level language models, since the words it invents (`eald', `bryoes',\n`lenrest') look somewhat plausible in English. Given that the average character\noccupies more than 25 timesteps, this again demonstrates the network's ability\nto generate coherent long-range structures.",
                "subsection": []
            }
        ]
    },
    {
        "id": "5",
        "section": "Handwriting Synthesis",
        "text": "Handwriting synthesis is the generation of handwriting for a given text. Clearly\nthe prediction networks we have described so far are unable to do this, since\nthere is no way to constrain which letters the network writes. This section de-\nscribes an augmentation that allows a prediction network to generate data se-\nquences conditioned on some high-level annotation sequence (a character string,\nin the case of handwriting synthesis). The resulting sequences are su\u000eciently\nconvincing that they often cannot be distinguished from real handwriting. Fur-\nthermore, this realism is achieved without sacri\fcing the diversity in writing\nstyle demonstrated in the previous section.\nThe main challenge in conditioning the predictions on the text is that the two\nsequences are of very di\u000berent lengths (the pen trace being on average twenty\n\fve times as long as the text), and the alignment between them is unknown until\nthe data is generated. This is because the number of co-ordinates used to write\neach character varies greatly according to style, size, pen speed etc. One neural\nnetwork model able to make sequential predictions based on two sequences of\ndi\u000berent length and unknown alignment is the RNN transducer [9]. However\npreliminary experiments on handwriting synthesis with RNN transducers were\nnot encouraging. A possible explanation is that the transducer uses two sepa-\nrate RNNs to process the two sequences, then combines their outputs to make\ndecisions, when it is usually more desirable to make all the information avail-\nable to single network. This work proposes an alternative model, where a `soft\nwindow' is convolved with the text string and fed in as an extra input to the\nprediction network. The parameters of the window are output by the network\nFigure 11: Online handwriting samples generated by the prediction\nnetwork. All samples are 700 timesteps long.\nat the same time as it makes the predictions, so that it dynamically determines\nan alignment between the text and the pen locations. Put simply, it learns to\ndecide which character to write next.",
        "subsection": [
            {
                "id": "5.1",
                "section": "Synthesis Network",
                "text": "Fig. 12 illustrates the network architecture used for handwriting synthesis. As\nwith the prediction network, the hidden layers are stacked on top of each other,\neach feeding up to the layer above, and there are skip connections from the\ninputs to all hidden layers and from all hidden layers to the outputs. The\ndi\u000berence is the added input from the character sequence, mediated by the\nwindow layer.\nGiven a length Ucharacter sequence cand a length Tdata sequence x, the\nsoft window wtintocat timestep t(1\u0014t\u0014T) is de\fned by the following\ndiscrete convolution with a mixture of KGaussian functions\n\u001e(t;u) =KX\nk=1\u000bk\ntexp\u0010\n\u0000\fk\nt\u0000\n\u0014k\nt\u0000u\u00012\u0011\n(46)\nwt=UX\nu=1\u001e(t;u)cu (47)\nwhere\u001e(t;u) is the window weight ofcuat timestep t. Intuitively, the \u0014tparam-\neters control the location of the window, the \ftparameters control the width of\nthe window and the \u000btparameters control the importance of the window within\nthe mixture. The size of the soft window vectors is the same as the size of the\ncharacter vectors cu(assuming a one-hot encoding, this will be the number of\ncharacters in the alphabet). Note that the window mixture is not normalised\nand hence does not determine a probability distribution; however the window\nweight\u001e(t;u) can be loosely interpreted as the network's belief that it is writ-\ning character cuat timet. Fig. 13 shows the alignment implied by the window\nweights during a training sequence.\nThe size 3Kvectorpof window parameters is determined as follows by the\noutputs of the \frst hidden layer of the network:\n(^\u000bt;^\ft;^\u0014t) =Wh1ph1\nt+bp (48)\n\u000bt= exp (^\u000bt) (49)\n\ft= exp\u0010\n^\ft\u0011\n(50)\n\u0014t=\u0014t\u00001+ exp (^\u0014t) (51)\nNote that the location parameters \u0014tare de\fned as o\u000bsets from the previous\nlocationsct\u00001, and that the size of the o\u000bset is constrained to be greater than\nzero. Intuitively, this means that network learns how far to slide each window\nat each step, rather than an absolute location. Using o\u000bsets was essential to\ngetting the network to align the text with the pen trace.\nFigure 12: Synthesis Network Architecture Circles represent layers, solid\nlines represent connections and dashed lines represent predictions. The topology\nis similar to the prediction network in Fig. 1, except that extra input from the\ncharacter sequence c, is presented to the hidden layers via the window layer\n(with a delay in the connection to the \frst hidden layer to avoid a cycle in the\ngraph).\nFigure 13: Window weights during a handwriting synthesis sequence\nEach point on the map shows the value of \u001e(t;u), wheretindexes the pen trace\nalong the horizontal axis and uindexes the text character along the vertical axis.\nThe bright line is the alignment chosen by the network between the characters\nand the writing. Notice that the line spreads out at the boundaries between\ncharacters; this means the network receives information about next and previous\nletters as it makes transitions, which helps guide its predictions.\nThewtvectors are passed to the second and third hidden layers at time t,\nand the \frst hidden layer at time t+1 (to avoid creating a cycle in the processing\ngraph). The update equations for the hidden layers are\nh1\nt=H\u0000\nWih1xt+Wh1h1h1\nt\u00001+Wwh1wt\u00001+b1\nh\u0001\n(52)\nhn\nt=H\u0000\nWihnxt+Whn\u00001hnhn\u00001\nt+Whnhnhn\nt\u00001+Wwhnwt+bn\nh\u0001\n(53)\nThe equations for the output layer remain unchanged from Eqs. (17) to (22).\nThe sequence loss is\nL(x) =\u0000log Pr( xjc) (54)\nwhere\nPr(xjc) =TY\nt=1Pr (xt+1jyt) (55)\nNote thatytis now a function of cas well as x1:t.\nThe loss derivatives with respect to the outputs ^ et;^\u0019t;^\u0016t;^\u001bt;^\u001atremain un-\nchanged from Eqs. (27), (30) and (31). Given the loss derivative@L(x)\n@wtwith\nrespect to the size Wwindow vector wt, obtained by backpropagating the out-\nput derivatives through the computation graph in Fig. 12, the derivatives with\nrespect to the window parameters are as follows:\n\u000f(k;t;u )def=\u000bk\ntexp\u0010\n\u0000\fk\nt\u0000\n\u0014k\nt\u0000u\u00012\u0011WX\nj=1@L(x)\n@wj\ntcj\nu (56)\n@L(x)\n@^\u000bk\nt=UX\nu=1\u000f(k;t;u ) (57)\n@L(x)\n@^\fk\nt=\u0000\fk\ntUX\nu=1\u000f(k;t;u )(\u0014k\nt\u0000u)2(58)\n@L(x)\n@\u0014k\nt=@L(x)\n@\u0014k\nt+1+ 2\fk\ntUX\nu=1\u000f(k;t;u )(u\u0000\u0014k\nt) (59)\n@L(x)\n@^\u0014k\nt= exp\u0000\n^\u0014k\nt\u0001@L(x)\n@\u0014k\nt(60)\nFig. 14 illustrates the operation of a mixture density output layer applied to\nhandwriting synthesis.",
                "subsection": []
            },
            {
                "id": "5.2",
                "section": "Experiments",
                "text": "The synthesis network was applied to the same input data as the handwriting\nprediction network in the previous section. The character-level transcriptions\nfrom the IAM-OnDB were now used to de\fne the character sequences c. The full\ntranscriptions contain 80 distinct characters (capital letters, lower case letters,\ndigits, and punctuation). However we used only a subset of 57, with all the\nSynthesis Output Density\nFigure 14: Mixture density outputs for handwriting synthesis. The top\nheatmap shows the predictive distributions for the pen locations, the bottom\nheatmap shows the mixture component weights. Comparison with Fig. 10 indi-\ncates that the synthesis network makes more precise predictions (with smaller\ndensity blobs) than the prediction-only network, especially at the ends of strokes,\nwhere the synthesis network has the advantage of knowing which letter comes\nnext.\nTable 4: Handwriting Synthesis Results. All results recorded on the val-\nidation set. `Log-Loss' is the mean value of L(x) in nats. `SSE' is the mean\nsum-squared-error per data point.\nRegularisation Log-Loss SSE\nnone -1096.9 0.23\nadaptive weight noise -1128.2 0.23\ndigits and most of the punctuation characters replaced with a generic `non-\nletter' label2.\nThe network architecture was as similar as possible to the best prediction\nnetwork: three hidden layers of 400 LSTM cells each, 20 bivariate Gaussian\nmixture components at the output layer and a size 3 input layer. The character\nsequence was encoded with one-hot vectors, and hence the window vectors were\nsize 57. A mixture of 10 Gaussian functions was used for the window parameters,\nrequiring a size 30 parameter vector. The total number of weights was increased\nto approximately 3.7M.\nThe network was trained with rmsprop, using the same parameters as in\nthe previous section. The network was retrained with adaptive weight noise,\ninitial standard deviation 0.075, and the output and LSTM gradients were again\nclipped in the range [ \u0000100;100] and [\u000010;10] respectively.\nTable 4 shows that adaptive weight noise gave a considerable improvement\nin log-loss (around 31.3 nats) but no signi\fcant change in sum-squared error.\nThe regularised network appears to generate slightly more realistic sequences,\nalthough the di\u000berence is hard to discern by eye. Both networks performed\nconsiderably better than the best prediction network. In particular the sum-\nsquared-error was reduced by 44%. This is likely due in large part to the im-\nproved predictions at the ends of strokes, where the error is largest.",
                "subsection": []
            },
            {
                "id": "5.3",
                "section": "Unbiased Sampling",
                "text": "Given c, an unbiased sample can be picked from Pr( xjc) by iteratively drawing\nxt+1from Pr (xt+1jyt), just as for the prediction network. The only di\u000berence is\nthat we must also decide when the synthesis network has \fnished writing the text\nand should stop making any future decisions. To do this, we use the following\nheuristic: as soon as \u001e(t;U+ 1)>\u001e(t;u)81\u0014u\u0014Uthe current input xtis\nde\fned as the end of the sequence and sampling ends. Examples of unbiased\nsynthesis samples are shown in Fig. 15. These and all subsequent \fgures were\ngenerated using the synthesis network retrained with adaptive weight noise.\nNotice how stylistic traits, such as character size, slant, cursiveness etc. vary\n2This was an oversight; however it led to the interesting result that when the text contains\na non-letter, the network must select a digits or punctuation mark to generate. Sometimes\nthe character can be be inferred from the context (e.g. the apostrophe in \\can't\"); otherwise\nit is chosen at random.\nwidely between the samples, but remain more-or-less consistent within them.\nThis suggests that the network identi\fes the traits early on in the sequence,\nthen remembers them until the end. By looking through enough samples for a\ngiven text, it appears to be possible to \fnd virtually any combination of stylistic\ntraits, which suggests that the network models them independently both from\neach other and from the text.\n`Blind taste tests' carried out by the author during presentations suggest\nthat at least some unbiased samples cannot be distinguished from real hand-\nwriting by the human eye. Nonetheless the network does make mistakes we\nwould not expect a human writer to make, often involving missing, confused\nor garbled letters3; this suggests that the network sometimes has trouble de-\ntermining the alignment between the characters and the trace. The number of\nmistakes increases markedly when less common words or phrases are included\nin the character sequence. Presumably this is because the network learns an\nimplicit character-level language model from the training set that gets confused\nwhen rare or unknown transitions occur.",
                "subsection": []
            },
            {
                "id": "5.4",
                "section": "Biased Sampling",
                "text": "One problem with unbiased samples is that they tend to be di\u000ecult to read\n(partly because real handwriting is di\u000ecult to read, and partly because the\nnetwork is an imperfect model). Intuitively, we would expect the network to\ngive higher probability to good handwriting because it tends to be smoother\nand more predictable than bad handwriting. If this is true, we should aim to\noutput more probable elements of Pr( xjc) if we want the samples to be easier to\nread. A principled search for high probability samples could lead to a di\u000ecult\ninference problem, as the probability of every output depends on all previous\noutputs. However a simple heuristic, where the sampler is biased towards more\nprobable predictions at each step independently, generally gives good results.\nDe\fne the probability bias bas a real number greater than or equal to zero.\nBefore drawing a sample from Pr( xt+1jyt), each standard deviation \u001bj\ntin the\nGaussian mixture is recalculated from Eq. (21) to\n\u001bj\nt= exp\u0010\n^\u001bj\nt\u0000b\u0011\n(61)\nand each mixture weight is recalculated from Eq. (19) to\n\u0019j\nt=exp\u0010\n^\u0019j\nt(1 +b)\u0011\nPM\nj0=1exp\u0010\n^\u0019j0\nt(1 +b)\u0011 (62)\nThis arti\fcially reduces the variance in both the choice of component from the\nmixture, and in the distribution of the component itself. When b= 0 unbiased\nsampling is recovered, and as b!1 the variance in the sampling disappears\n3We expect humans to make mistakes like misspelling `temperament' as `temperement', as\nthe second writer in Fig. 15 seems to have done.\nFigure 15: Real and generated handwriting . The top line in each block is\nreal, the rest are unbiased samples from the synthesis network. The two texts\nare from the validation set and were not seen during training.\nand the network always outputs the mode of the most probable component in\nthe mixture (which is not necessarily the mode of the mixture, but at least a\nreasonable approximation). Fig. 16 shows the e\u000bect of progressively increasing\nthe bias, and Fig. 17 shows samples generated with a low bias for the same texts\nas Fig. 15.",
                "subsection": []
            },
            {
                "id": "5.5",
                "section": "Primed Sampling",
                "text": "Another reason to constrain the sampling would be to generate handwriting\nin the style of a particular writer (rather than in a randomly selected style).\nThe easiest way to do this would be to retrain it on that writer only. But\neven without retraining, it is possible to mimic a particular style by `priming'\nthe network with a real sequence, then generating an extension with the real\nsequence still in the network's memory. This can be achieved for a real x,cand\na synthesis character string sby setting the character sequence to c0=c+s\nand clamping the data inputs to xfor the \frst Ttimesteps, then sampling\nas usual until the sequence ends. Examples of primed samples are shown in\nFigs. 18 and 19. The fact that priming works proves that the network is able to\nremember stylistic features identi\fed earlier on in the sequence. This technique\nappears to work better for sequences in the training data than those the network\nhas never seen.\nPrimed sampling and reduced variance sampling can also be combined. As\nshown in Figs. 20 and 21 this tends to produce samples in a `cleaned up' version\nof the priming style, with overall stylistic traits such as slant and cursiveness\nretained, but the strokes appearing smoother and more regular. A possible\napplication would be the arti\fcial enhancement of poor handwriting.",
                "subsection": []
            }
        ]
    },
    {
        "id": "6",
        "section": "Conclusions and Future Work",
        "text": "This paper has demonstrated the ability of Long Short-Term Memory recur-\nrent neural networks to generate both discrete and real-valued sequences with\ncomplex, long-range structure using next-step prediction. It has also introduced\na novel convolutional mechanism that allows a recurrent network to condition\nits predictions on an auxiliary annotation sequence, and used this approach to\nsynthesise diverse and realistic samples of online handwriting. Furthermore, it\nhas shown how these samples can be biased towards greater legibility, and how\nthey can be modelled on the style of a particular writer.\nSeveral directions for future work suggest themselves. One is the applica-\ntion of the network to speech synthesis, which is likely to be more challenging\nthan handwriting synthesis due to the greater dimensionality of the data points.\nAnother is to gain a better insight into the internal representation of the data,\nand to use this to manipulate the sample distribution directly. It would also\nbe interesting to develop a mechanism to automatically extract high-level an-\nnotations from sequence data. In the case of handwriting, this could allow for\nFigure 16: Samples biased towards higher probability. The probability\nbiasesbare shown at the left. As the bias increases the diversity decreases and\nthe samples tend towards a kind of `average handwriting' which is extremely\nregular and easy to read (easier, in fact, than most of the real handwriting in the\ntraining set). Note that even when the variance disappears, the same letter is\nnot written the same way at di\u000berent points in a sequence (for examples the `e's\nin \\exactly the same\", the `l's in \\until they all look\"), because the predictions\nare still in\ruenced by the previous outputs. If you look closely you can see that\nthe last three lines are not quite exactly the same.\nFigure 17: A slight bias. The top line in each block is real. The rest are\nsamples from the synthesis network with a probability bias of 0.15, which seems\nto give a good balance between diversity and legibility.\nFigure 18: Samples primed with real sequences. The priming sequences\n(drawn from the training set) are shown at the top of each block. None of the\nlines in the sampled text exist in the training set. The samples were selected\nfor legibility.\nFigure 19: Samples primed with real sequences (cotd).\nFigure 20: Samples primed with real sequences and biased towards\nhigher probability. The priming sequences are at the top of the blocks. The\nprobability bias was 1. None of the lines in the sampled text exist in the training\nset.\nFigure 21: Samples primed with real sequences and biased towards\nhigher probability (cotd)\nmore nuanced annotations than just text, for example stylistic features, di\u000berent\nforms of the same letter, information about stroke order and so on.\nAcknowledgements\nThanks to Yichuan Tang, Ilya Sutskever, Navdeep Jaitly, Geo\u000brey Hinton and\nother colleagues at the University of Toronto for numerous useful comments\nand suggestions. This work was supported by a Global Scholarship from the\nCanadian Institute for Advanced Research.\nReferences\n[1] Y. Bengio, P. Simard, and P. Frasconi. Learning long-term dependencies\nwith gradient descent is di\u000ecult. IEEE Transactions on Neural Networks ,\n5(2):157{166, March 1994.\n[2] C. Bishop. Mixture density networks. Technical report, 1994.\n[3] C. Bishop. Neural Networks for Pattern Recognition . Oxford University\nPress, Inc., 1995.\n[4] N. Boulanger-Lewandowski, Y. Bengio, and P. Vincent. Modeling tempo-\nral dependencies in high-dimensional sequences: Application to polyphonic\nmusic generation and transcription. In Proceedings of the Twenty-nine In-\nternational Conference on Machine Learning (ICML'12) , 2012.\n[5] J. G. Cleary, Ian, and I. H. Witten. Data compression using adaptive cod-\ning and partial string matching. IEEE Transactions on Communications ,\n32:396{402, 1984.\n[6] D. Eck and J. Schmidhuber. A \frst look at music composition using lstm\nrecurrent neural networks. Technical report, IDSIA USI-SUPSI Instituto\nDalle Molle.\n[7] F. Gers, N. Schraudolph, and J. Schmidhuber. Learning precise timing\nwith LSTM recurrent networks. Journal of Machine Learning Research ,\n3:115{143, 2002.\n[8] A. Graves. Practical variational inference for neural networks. In Advances\nin Neural Information Processing Systems , volume 24, pages 2348{2356.\n2011.\n[9] A. Graves. Sequence transduction with recurrent neural networks. In ICML\nRepresentation Learning Worksop , 2012.\n[10] A. Graves, A. Mohamed, and G. Hinton. Speech recognition with deep\nrecurrent neural networks. In Proc. ICASSP , 2013.\n[11] A. Graves and J. Schmidhuber. Framewise phoneme classi\fcation with bidi-\nrectional LSTM and other neural network architectures. Neural Networks ,\n18:602{610, 2005.\n[12] A. Graves and J. Schmidhuber. O\u000fine handwriting recognition with multi-\ndimensional recurrent neural networks. In Advances in Neural Information\nProcessing Systems , volume 21, 2008.\n[13] P. D. Gr\u007f unwald. The Minimum Description Length Principle (Adaptive\nComputation and Machine Learning) . The MIT Press, 2007.\n[14] G. Hinton. A Practical Guide to Training Restricted Boltzmann Machines.\nTechnical report, 2010.\n[15] S. Hochreiter, Y. Bengio, P. Frasconi, and J. Schmidhuber. Gradient Flow\nin Recurrent Nets: the Di\u000eculty of Learning Long-term Dependencies.\nIn S. C. Kremer and J. F. Kolen, editors, A Field Guide to Dynamical\nRecurrent Neural Networks . 2001.\n[16] S. Hochreiter and J. Schmidhuber. Long Short-Term Memory. Neural\nComputation , 9(8):1735{1780, 1997.\n[17] M. Hutter. The Human Knowledge Compression Contest, 2012.\n[18] K.-C. Jim, C. Giles, and B. Horne. An analysis of noise in recurrent neural\nnetworks: convergence and generalization. Neural Networks, IEEE Trans-\nactions on , 7(6):1424 {1438, 1996.\n[19] S. Johansson, R. Atwell, R. Garside, and G. Leech. The tagged LOB corpus\nuser's manual; Norwegian Computing Centre for the Humanities, 1986.\n[20] B. Knoll and N. de Freitas. A machine learning perspective on predictive\ncoding with paq. CoRR , abs/1108.3298, 2011.\n[21] M. Liwicki and H. Bunke. IAM-OnDB - an on-line English sentence\ndatabase acquired from handwritten text on a whiteboard. In Proc. 8th\nInt. Conf. on Document Analysis and Recognition , volume 2, pages 956{\n961, 2005.\n[22] M. P. Marcus, B. Santorini, and M. A. Marcinkiewicz. Building a large\nannotated corpus of english: The penn treebank. COMPUTATIONAL\nLINGUISTICS , 19(2):313{330, 1993.\n[23] T. Mikolov. Statistical Language Models based on Neural Networks . PhD\nthesis, Brno University of Technology, 2012.\n[24] T. Mikolov, I. Sutskever, A. Deoras, H. Le, S. Kombrink, and J. Cernocky.\nSubword language modeling with neural networks. Technical report, Un-\npublished Manuscript, 2012.\n[25] A. Mnih and G. Hinton. A Scalable Hierarchical Distributed Language\nModel. In Advances in Neural Information Processing Systems , volume 21,\n2008.\n[26] A. Mnih and Y. W. Teh. A fast and simple algorithm for training neural\nprobabilistic language models. In Proceedings of the 29th International\nConference on Machine Learning , pages 1751{1758, 2012.\n[27] T. N. Sainath, A. Mohamed, B. Kingsbury, and B. Ramabhadran. Low-\nrank matrix factorization for deep neural network training with high-\ndimensional output targets. In Proc. ICASSP , 2013.\n[28] M. Schuster. Better generative models for sequential data problems: Bidi-\nrectional recurrent mixture density networks. pages 589{595. The MIT\nPress, 1999.\n[29] I. Sutskever, G. E. Hinton, and G. W. Taylor. The recurrent temporal\nrestricted boltzmann machine. pages 1601{1608, 2008.\n[30] I. Sutskever, J. Martens, and G. Hinton. Generating text with recurrent\nneural networks. In ICML , 2011.\n[31] G. W. Taylor and G. E. Hinton. Factored conditional restricted boltzmann\nmachines for modeling motion style. In Proc. 26th Annual International\nConference on Machine Learning , pages 1025{1032, 2009.\n[32] T. Tieleman and G. Hinton. Lecture 6.5 - rmsprop: Divide the gradient by\na running average of its recent magnitude, 2012.\n[33] R. Williams and D. Zipser. Gradient-based learning algorithms for recur-\nrent networks and their computational complexity. In Back-propagation:\nTheory, Architectures and Applications , pages 433{486. 1995.",
        "subsection": []
    },
    {
        "id": "",
        "section": "Abstract",
        "text": "This paper shows how Long Short-term Memory recurrent neural net-\nworks can be used to generate complex sequences with long-range struc-\nture, simply by predicting one data point at a time. The approach is\ndemonstrated for text (where the data are discrete) and online handwrit-\ning (where the data are real-valued). It is then extended to handwriting\nsynthesis by allowing the network to condition its predictions on a text\nsequence. The resulting system is able to generate highly realistic cursive\nhandwriting in a wide variety of styles.\n1 Introduction\nRecurrent neural networks (RNNs) are a rich class of dynamic models that have\nbeen used to generate sequences in domains as diverse as music ",
        "subsection": []
    },
    {
        "missing": []
    }
]