[
    {
        "id": "",
        "section": "Abstract",
        "text": "We present an interpretation of Inception modules in con-\nvolutional neural networks as being an intermediate step\nin-between regular convolution and the depthwise separable\nconvolution operation (a depthwise convolution followed by\na pointwise convolution). In this light, a depthwise separable\nconvolution can be understood as an Inception module with\na maximally large number of towers. This observation leads\nus to propose a novel deep convolutional neural network\narchitecture inspired by Inception, where Inception modules\nhave been replaced with depthwise separable convolutions.\nWe show that this architecture, dubbed Xception, slightly\noutperforms Inception V3 on the ImageNet dataset (which\nInception V3 was designed for), and signi\ufb01cantly outper-\nforms Inception V3 on a larger image classi\ufb01cation dataset\ncomprising 350 million images and 17,000 classes. Since\nthe Xception architecture has the same number of param-\neters as Inception V3, the performance gains are not due\nto increased capacity but rather to a more ef\ufb01cient use of\nmodel parameters.",
        "subsection": [
            {
                "id": "1.1.",
                "section": "The inception hypothesis",
                "text": "A convolution layer attempts to learn \ufb01lters in a 3D space,\nwith 2 spatial dimensions (width and height) and a chan-\nnel dimension; thus a single convolution kernel is tasked\nwith simultaneously mapping cross-channel correlations and\nspatial correlations.\nThis idea behind the Inception module is to make this\nprocess easier and more ef\ufb01cient by explicitly factoring it\ninto a series of operations that would independently look at\ncross-channel correlations and at spatial correlations. More\nprecisely, the typical Inception module \ufb01rst looks at cross-\nchannel correlations via a set of 1x1 convolutions, mapping\nthe input data into 3 or 4 separate spaces that are smaller than\nthe original input space, and then maps all correlations in\nthese smaller 3D spaces, via regular 3x3 or 5x5 convolutions.\nThis is illustrated in \ufb01gure 1. In effect, the fundamental hy-\npothesis behind Inception is that cross-channel correlations\nand spatial correlations are suf\ufb01ciently decoupled that it is\npreferable not to map them jointly1.\n1Consider a simpli\ufb01ed version of an Inception module that\nonly uses one size of convolution (e.g. 3x3) and does not\ninclude an average pooling tower (\ufb01gure 2). This Incep-\ntion module can be reformulated as a large 1x1 convolution\nfollowed by spatial convolutions that would operate on non-\noverlapping segments of the output channels (\ufb01gure 3). This\nobservation naturally raises the question: what is the ef-\nfect of the number of segments in the partition (and their\nsize)? Would it be reasonable to make a much stronger\nhypothesis than the Inception hypothesis, and assume that\ncross-channel correlations and spatial correlations can be\nmapped completely separately?\nFigure 1. A canonical Inception module (Inception V3).\nFigure 2. A simpli\ufb01ed Inception module.",
                "subsection": []
            },
            {
                "id": "1.2.",
                "section": "The continuum between convolutions and sep-",
                "text": "arable convolutions\nAn \u201cextreme\u201d version of an Inception module, based on\nthis stronger hypothesis, would \ufb01rst use a 1x1 convolution to\nmap cross-channel correlations, and would then separately\nmap the spatial correlations of every output channel. This\nis shown in \ufb01gure 4. We remark that this extreme form of\nan Inception module is almost identical to a depthwise sepa-\nrable convolution , an operation that has been used in neural\nlations and height-wise correlations. This is implemented by some of the\nmodules found in Inception V3, which alternate 7x1 and 1x7 convolutions.\nThe use of such spatially separable convolutions has a long history in im-\nage processing and has been used in some convolutional neural network\nimplementations since at least 2012 (possibly earlier).Figure 3. A strictly equivalent reformulation of the simpli\ufb01ed In-\nception module.\nFigure 4. An \u201cextreme\u201d version of our Inception module, with one\nspatial convolution per output channel of the 1x1 convolution.\nnetwork design as early as 2014 [ 15] and has become more\npopular since its inclusion in the TensorFlow framework [ 1]\nin 2016.\nA depthwise separable convolution, commonly called\n\u201cseparable convolution\u201d in deep learning frameworks such as\nTensorFlow and Keras, consists in a depthwise convolution ,\ni.e. a spatial convolution performed independently over each\nchannel of an input, followed by a pointwise convolution ,\ni.e. a 1x1 convolution, projecting the channels output by the\ndepthwise convolution onto a new channel space. This is\nnot to be confused with a spatially separable convolution,\nwhich is also commonly called \u201cseparable convolution\u201d in\nthe image processing community.\nTwo minor differences between and \u201cextreme\u201d version of\nan Inception module and a depthwise separable convolution\nwould be:\n\u000fThe order of the operations: depthwise separable con-\nvolutions as usually implemented (e.g. in TensorFlow)\nperform \ufb01rst channel-wise spatial convolution and then\nperform 1x1 convolution, whereas Inception performs\nthe 1x1 convolution \ufb01rst.\n\u000fThe presence or absence of a non-linearity after the\n\ufb01rst operation. In Inception, both operations are fol-\nseparable convolutions are usually implemented with-\nout non-linearities.\nWe argue that the \ufb01rst difference is unimportant, in par-\nticular because these operations are meant to be used in a\nstacked setting. The second difference might matter, and we\ninvestigate it in the experimental section (in particular see\n\ufb01gure 10).\nWe also note that other intermediate formulations of In-\nception modules that lie in between regular Inception mod-\nules and depthwise separable convolutions are also possible:\nin effect, there is a discrete spectrum between regular convo-\nlutions and depthwise separable convolutions, parametrized\nby the number of independent channel-space segments used\nfor performing spatial convolutions. A regular convolution\n(preceded by a 1x1 convolution), at one extreme of this\nspectrum, corresponds to the single-segment case; a depth-\nwise separable convolution corresponds to the other extreme\nwhere there is one segment per channel; Inception modules\nlie in between, dividing a few hundreds of channels into 3\nor 4 segments. The properties of such intermediate modules\nappear not to have been explored yet.\nHaving made these observations, we suggest that it may\nbe possible to improve upon the Inception family of archi-\ntectures by replacing Inception modules with depthwise sep-\narable convolutions, i.e. by building models that would be\nstacks of depthwise separable convolutions. This is made\npractical by the ef\ufb01cient depthwise convolution implementa-\ntion available in TensorFlow. In what follows, we present a\nconvolutional neural network architecture based on this idea,\nwith a similar number of parameters as Inception V3, and\nwe evaluate its performance against Inception V3 on two\nlarge-scale image classi\ufb01cation task.",
                "subsection": []
            }
        ]
    },
    {
        "id": "1.",
        "section": "Introduction",
        "text": "Convolutional neural networks have emerged as the mas-\nter algorithm in computer vision in recent years, and de-\nveloping recipes for designing them has been a subject of\nconsiderable attention. The history of convolutional neural\nnetwork design started with LeNet-style models [ 10], which\nwere simple stacks of convolutions for feature extraction\nand max-pooling operations for spatial sub-sampling. In\n2012, these ideas were re\ufb01ned into the AlexNet architec-\nture [ 9], where convolution operations were being repeated\nmultiple times in-between max-pooling operations, allowing\nthe network to learn richer features at every spatial scale.\nWhat followed was a trend to make this style of network\nincreasingly deeper, mostly driven by the yearly ILSVRC\ncompetition; \ufb01rst with Zeiler and Fergus in 2013 [ 25] and\nthen with the VGG architecture in 2014 [18].\nAt this point a new style of network emerged, the Incep-\ntion architecture, introduced by Szegedy et al. in 2014 [ 20]as GoogLeNet (Inception V1), later re\ufb01ned as Inception V2\n[7], Inception V3 [ 21], and most recently Inception-ResNet\n[19]. Inception itself was inspired by the earlier Network-\nIn-Network architecture [ 11]. Since its \ufb01rst introduction,\nInception has been one of the best performing family of\nmodels on the ImageNet dataset [ 14], as well as internal\ndatasets in use at Google, in particular JFT [5].\nThe fundamental building block of Inception-style mod-\nels is the Inception module, of which several different ver-\nsions exist. In \ufb01gure 1 we show the canonical form of an\nInception module, as found in the Inception V3 architec-\nture. An Inception model can be understood as a stack of\nsuch modules. This is a departure from earlier VGG-style\nnetworks which were stacks of simple convolution layers.\nWhile Inception modules are conceptually similar to con-\nvolutions (they are convolutional feature extractors), they\nempirically appear to be capable of learning richer repre-\nsentations with less parameters. How do they work, and\nhow do they differ from regular convolutions? What design\nstrategies come after Inception?",
        "subsection": []
    },
    {
        "id": "2.",
        "section": "Prior work",
        "text": "The present work relies heavily on prior efforts in the\nfollowing areas:\n\u000fConvolutional neural networks [ 10,9,25], in particular\nthe VGG-16 architecture [ 18], which is schematically\nsimilar to our proposed architecture in a few respects.\n\u000fThe Inception architecture family of convolutional neu-\nral networks [ 20,7,21,19], which \ufb01rst demonstrated\nthe advantages of factoring convolutions into multiple\nbranches operating successively on channels and then\non space.\n\u000fDepthwise separable convolutions, which our proposed\narchitecture is entirely based upon. While the use of spa-\ntially separable convolutions in neural networks has a\nlong history, going back to at least 2012 [ 12] (but likely\neven earlier), the depthwise version is more recent. Lau-\nrent Sifre developed depthwise separable convolutionsduring an internship at Google Brain in 2013, and used\nthem in AlexNet to obtain small gains in accuracy and\nlarge gains in convergence speed, as well as a signi\ufb01cant\nreduction in model size. An overview of his work was\n\ufb01rst made public in a presentation at ICLR 2014 [ 23].\nDetailed experimental results are reported in Sifre\u2019s the-\nsis, section 6.2 [ 15]. This initial work on depthwise sep-\narable convolutions was inspired by prior research from\nSifre and Mallat on transformation-invariant scattering\n[16,15]. Later, a depthwise separable convolution was\nused as the \ufb01rst layer of Inception V1 and Inception\nV2 [ 20,7]. Within Google, Andrew Howard [ 6] has\nintroduced ef\ufb01cient mobile models called MobileNets\nusing depthwise separable convolutions. Jin et al. in\n2014 [ 8] and Wang et al. in 2016 [ 24] also did related\nwork aiming at reducing the size and computational\ncost of convolutional neural networks using separable\nconvolutions. Additionally, our work is only possible\ndue to the inclusion of an ef\ufb01cient implementation of\ndepthwise separable convolutions in the TensorFlow\nframework [1].\n\u000fResidual connections, introduced by He et al. in [ 4],\nwhich our proposed architecture uses extensively.",
        "subsection": []
    },
    {
        "id": "3.",
        "section": "The xception architecture",
        "text": "We propose a convolutional neural network architecture\nbased entirely on depthwise separable convolution layers.\nIn effect, we make the following hypothesis: that the map-\nping of cross-channels correlations and spatial correlations\nin the feature maps of convolutional neural networks can be\nentirely decoupled. Because this hypothesis is a stronger ver-\nsion of the hypothesis underlying the Inception architecture,\nwe name our proposed architecture Xception , which stands\nfor \u201cExtreme Inception\u201d.\nA complete description of the speci\ufb01cations of the net-\nwork is given in \ufb01gure 5. The Xception architecture has\n36 convolutional layers forming the feature extraction base\nof the network. In our experimental evaluation we will ex-\nclusively investigate image classi\ufb01cation and therefore our\nconvolutional base will be followed by a logistic regression\nlayer. Optionally one may insert fully-connected layers be-\nfore the logistic regression layer, which is explored in the\nexperimental evaluation section (in particular, see \ufb01gures\n7 and 8). The 36 convolutional layers are structured into\n14 modules, all of which have linear residual connections\naround them, except for the \ufb01rst and last modules.\nIn short, the Xception architecture is a linear stack of\ndepthwise separable convolution layers with residual con-\nnections. This makes the architecture very easy to de\ufb01ne\nand modify; it takes only 30 to 40 lines of code using a high-\nlevel library such as Keras [ 2] or TensorFlow-Slim [ 17], not\nlike architectures such as Inception V2 or V3 which are far\nmore complex to de\ufb01ne. An open-source implementation of\nXception using Keras and TensorFlow is provided as part of\nthe Keras Applications module2, under the MIT license.",
        "subsection": [
            {
                "id": "4.1.",
                "section": "The jft dataset",
                "text": "JFT is an internal Google dataset for large-scale image\nclassi\ufb01cation dataset, \ufb01rst introduced by Hinton et al. in [ 5],\nwhich comprises over 350 million high-resolution images\nannotated with labels from a set of 17,000 classes. To eval-\nuate the performance of a model trained on JFT, we use an\nauxiliary dataset, FastEval14k .\nFastEval14k is a dataset of 14,000 images with dense\nannotations from about 6,000 classes (36.5 labels per im-\nage on average). On this dataset we evaluate performance\nusing Mean Average Precision for top 100 predictions\n(MAP@100), and we weight the contribution of each class\nto MAP@100 with a score estimating how common (and\ntherefore important) the class is among social media images.\nThis evaluation procedure is meant to capture performance\non frequently occurring labels from social media, which is\ncrucial for production models at Google.",
                "subsection": []
            },
            {
                "id": "4.2.",
                "section": "Optimization con",
                "text": "A different optimization con\ufb01guration was used for Ima-\ngeNet and JFT:\n\u000fOn ImageNet:\n\u2013Optimizer: SGD\n\u2013Momentum: 0.9\n\u2013Initial learning rate: 0.045\n\u2013Learning rate decay: decay of rate 0.94 every 2\nepochs\n\u000fOn JFT:\n\u2013Optimizer: RMSprop [22]\n\u2013Momentum: 0.9\n\u2013Initial learning rate: 0.001\n2https://keras.io/applications/#xception\u2013Learning rate decay: decay of rate 0.9 every\n3,000,000 samples\nFor both datasets, the same exact same optimization con-\n\ufb01guration was used for both Xception and Inception V3.\nNote that this con\ufb01guration was tuned for best performance\nwith Inception V3; we did not attempt to tune optimization\nhyperparameters for Xception. Since the networks have dif-\nferent training pro\ufb01les (\ufb01gure 6), this may be suboptimal, es-\npecially on the ImageNet dataset, on which the optimization\ncon\ufb01guration used had been carefully tuned for Inception\nV3.\nAdditionally, all models were evaluated using Polyak\naveraging [13] at inference time.",
                "subsection": []
            },
            {
                "id": "4.3.",
                "section": "Regularization con",
                "text": "\u000fWeight decay: The Inception V3 model uses a weight\ndecay (L2 regularization) rate of 4e\u00005, which has\nbeen carefully tuned for performance on ImageNet. We\nfound this rate to be quite suboptimal for Xception\nand instead settled for 1e\u00005. We did not perform\nan extensive search for the optimal weight decay rate.\nThe same weight decay rates were used both for the\nImageNet experiments and the JFT experiments.\n\u000fDropout: For the ImageNet experiments, both models\ninclude a dropout layer of rate 0.5 before the logistic\nregression layer. For the JFT experiments, no dropout\nwas included due to the large size of the dataset which\nmade over\ufb01tting unlikely in any reasonable amount of\ntime.\n\u000fAuxiliary loss tower: The Inception V3 architecture\nmay optionally include an auxiliary tower which back-\npropagates the classi\ufb01cation loss earlier in the network,\nserving as an additional regularization mechanism. For\nsimplicity, we choose not to include this auxiliary tower\nin any of our models.",
                "subsection": []
            },
            {
                "id": "4.4.",
                "section": "Training infrastructure",
                "text": "All networks were implemented using the TensorFlow\nframework [ 1] and trained on 60 NVIDIA K80 GPUs each.\nFor the ImageNet experiments, we used data parallelism\nwith synchronous gradient descent to achieve the best classi-\n\ufb01cation performance, while for JFT we used asynchronous\ngradient descent so as to speed up training. The ImageNet\nexperiments took approximately 3 days each, while the JFT\nexperiments took over one month each. The JFT models\nwere not trained to full convergence, which would have\nFigure 5. The Xception architecture: the data \ufb01rst goes through the entry \ufb02ow, then through the middle \ufb02ow which is repeated eight times,\nand \ufb01nally through the exit \ufb02ow. Note that all Convolution and SeparableConvolution layers are followed by batch normalization [ 7] (not\nincluded in the diagram). All SeparableConvolution layers use a depth multiplier of 1 (no depth expansion).",
                "subsection": []
            },
            {
                "id": "4.5.",
                "section": "Comparison with inception v",
                "text": "",
                "subsection": [
                    {
                        "id": "4.5.1",
                        "section": "Classi",
                        "text": "All evaluations were run with a single crop of the inputs\nimages and a single model. ImageNet results are reported\non the validation set rather than the test set (i.e. on the\nnon-blacklisted images from the validation set of ILSVRC\n2012). JFT results are reported after 30 million iterations\n(one month of training) rather than after full convergence.\nResults are provided in table 1 and table 2, as well as \ufb01gure\n6, \ufb01gure 7, \ufb01gure 8. On JFT, we tested both versions of our\nnetworks that did not include any fully-connected layers, and\nversions that included two fully-connected layers of 4096\nunits each before the logistic regression layer.\nOn ImageNet, Xception shows marginally better results\nthan Inception V3. On JFT, Xception shows a 4.3% rel-\native improvement on the FastEval14k MAP@100 metric.\nWe also note that Xception outperforms ImageNet results\nreported by He et al. for ResNet-50, ResNet-101 and ResNet-152 [4].\nTable 1. Classi\ufb01cation performance comparison on ImageNet (sin-\ngle crop, single model). VGG-16 and ResNet-152 numbers are\nonly included as a reminder. The version of Inception V3 being\nbenchmarked does not include the auxiliary tower.\nTop-1 accuracy Top-5 accuracy\nVGG-16 0.715 0.901\nResNet-152 0.770 0.933\nInception V3 0.782 0.941\nXception 0.790 0.945\nThe Xception architecture shows a much larger perfor-\nmance improvement on the JFT dataset compared to the\nImageNet dataset. We believe this may be due to the fact\nthat Inception V3 was developed with a focus on ImageNet\nand may thus be by design over-\ufb01t to this speci\ufb01c task. On\nthe other hand, neither architecture was tuned for JFT. It is\nlikely that a search for better hyperparameters for Xception\nTable 2. Classi\ufb01cation performance comparison on JFT (single\ncrop, single model).\nFastEval14k MAP@100\nInception V3 - no FC layers 6.36\nXception - no FC layers 6.70\nInception V3 with FC layers 6.50\nXception with FC layers 6.78\nFigure 6. Training pro\ufb01le on ImageNet\nFigure 7. Training pro\ufb01le on JFT, without fully-connected layers\nularization parameters) would yield signi\ufb01cant additional\nimprovement.",
                        "subsection": []
                    },
                    {
                        "id": "4.5.2",
                        "section": "Size and speed",
                        "text": "Table 3. Size and training speed comparison.\nParameter count Steps/second\nInception V3 23,626,728 31\nXception 22,855,952 28\nIn table 3 we compare the size and speed of InceptionFigure 8. Training pro\ufb01le on JFT, with fully-connected layers\nV3 and Xception. Parameter count is reported on ImageNet\n(1000 classes, no fully-connected layers) and the number of\ntraining steps (gradient updates) per second is reported on\nImageNet with 60 K80 GPUs running synchronous gradient\ndescent. Both architectures have approximately the same\nsize (within 3.5%), and Xception is marginally slower. We\nexpect that engineering optimizations at the level of the\ndepthwise convolution operations can make Xception faster\nthan Inception V3 in the near future. The fact that both\narchitectures have almost the same number of parameters\nindicates that the improvement seen on ImageNet and JFT\ndoes not come from added capacity but rather from a more\nef\ufb01cient use of the model parameters.",
                        "subsection": []
                    }
                ]
            },
            {
                "id": "4.6.",
                "section": "Effect of the residual connections",
                "text": "Figure 9. Training pro\ufb01le with and without residual connections.\nTo quantify the bene\ufb01ts of residual connections in the\nXception architecture, we benchmarked on ImageNet a mod-\nconnections. Results are shown in \ufb01gure 9. Residual con-\nnections are clearly essential in helping with convergence,\nboth in terms of speed and \ufb01nal classi\ufb01cation performance.\nHowever we will note that benchmarking the non-residual\nmodel with the same optimization con\ufb01guration as the resid-\nual model may be uncharitable and that better optimization\ncon\ufb01gurations might yield more competitive results.\nAdditionally, let us note that this result merely shows the\nimportance of residual connections for this speci\ufb01c architec-\nture, and that residual connections are in no way required\nin order to build models that are stacks of depthwise sepa-\nrable convolutions. We also obtained excellent results with\nnon-residual VGG-style models where all convolution layers\nwere replaced with depthwise separable convolutions (with\na depth multiplier of 1), superior to Inception V3 on JFT at\nequal parameter count.",
                "subsection": []
            },
            {
                "id": "4.7.",
                "section": "Effect of an intermediate activation after point-",
                "text": "wise convolutions\nFigure 10. Training pro\ufb01le with different activations between the\ndepthwise and pointwise operations of the separable convolution\nlayers.\nWe mentioned earlier that the analogy between depth-\nwise separable convolutions and Inception modules suggests\nthat depthwise separable convolutions should potentially in-\nclude a non-linearity between the depthwise and pointwise\noperations. In the experiments reported so far, no such non-\nlinearity was included. However we also experimentally\ntested the inclusion of either ReLU or ELU [ 3] as intermedi-\nate non-linearity. Results are reported on ImageNet in \ufb01gure\n10, and show that the absence of any non-linearity leads to\nboth faster convergence and better \ufb01nal performance.\nThis is a remarkable observation, since Szegedy et al. re-\nport the opposite result in [ 21] for Inception modules. It may\nbe that the depth of the intermediate feature spaces on which\nspatial convolutions are applied is critical to the usefulness\nof the non-linearity: for deep feature spaces (e.g. thosefound in Inception modules) the non-linearity is helpful, but\nfor shallow ones (e.g. the 1-channel deep feature spaces\nof depthwise separable convolutions) it becomes harmful,\npossibly due to a loss of information.",
                "subsection": []
            }
        ]
    },
    {
        "id": "4.",
        "section": "Experimental evaluation",
        "text": "We choose to compare Xception to the Inception V3 ar-\nchitecture, due to their similarity of scale: Xception and\nInception V3 have nearly the same number of parameters\n(table 3), and thus any performance gap could not be at-\ntributed to a difference in network capacity. We conduct\nour comparison on two image classi\ufb01cation tasks: one is\nthe well-known 1000-class single-label classi\ufb01cation task on\nthe ImageNet dataset [ 14], and the other is a 17,000-class\nmulti-label classi\ufb01cation task on the large-scale JFT dataset.",
        "subsection": []
    },
    {
        "id": "5.",
        "section": "Future directions",
        "text": "We noted earlier the existence of a discrete spectrum be-\ntween regular convolutions and depthwise separable convo-\nlutions, parametrized by the number of independent channel-\nspace segments used for performing spatial convolutions. In-\nception modules are one point on this spectrum. We showed\nin our empirical evaluation that the extreme formulation of\nan Inception module, the depthwise separable convolution,\nmay have advantages over regular a regular Inception mod-\nule. However, there is no reason to believe that depthwise\nseparable convolutions are optimal. It may be that intermedi-\nate points on the spectrum, lying between regular Inception\nmodules and depthwise separable convolutions, hold further\nadvantages. This question is left for future investigation.",
        "subsection": []
    },
    {
        "id": "6.",
        "section": "Conclusions",
        "text": "We showed how convolutions and depthwise separable\nconvolutions lie at both extremes of a discrete spectrum,\nwith Inception modules being an intermediate point in be-\ntween. This observation has led to us to propose replacing\nInception modules with depthwise separable convolutions in\nneural computer vision architectures. We presented a novel\narchitecture based on this idea, named Xception, which has\na similar parameter count as Inception V3. Compared to\nInception V3, Xception shows small gains in classi\ufb01cation\nperformance on the ImageNet dataset and large gains on the\nJFT dataset. We expect depthwise separable convolutions\nto become a cornerstone of convolutional neural network\narchitecture design in the future, since they offer similar\nproperties as Inception modules, yet are as easy to use as\nregular convolution layers.",
        "subsection": []
    },
    {
        "missing": []
    },
    {
        "references": [
            "M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen, C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, S. Ghe- mawat, I. Goodfellow, A. Harp, G. Irving, M. Isard, Y . Jia, R. Jozefowicz, L. Kaiser, M. Kudlur, J. Levenberg, D. Man \u00b4e, R. Monga, S. Moore, D. Murray, C. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever, K. Talwar, P. Tucker, V . Van- houcke, V . Vasudevan, F. Vi \u00b4egas, O. Vinyals, P. Warden, M. Wattenberg, M. Wicke, Y . Yu, and X. Zheng. Tensor- Flow: Large-scale machine learning on heterogeneous sys- tems, 2015. Software available from tensor\ufb02ow.org.",
            " F. Chollet. Keras. https://github.com/fchollet/keras, 2015.",
            "D.-A. Clevert, T. Unterthiner, and S. Hochreiter. Fast and accurate deep network learning by exponential linear units (elus). arXiv preprint arXiv:1511.07289[4] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. arXiv preprint arXiv:1512.03385 , 2015.",
            ". Table 1. Classi\ufb01cation performance comparison on ImageNet (sin- gle crop, single model). VGG-16 and ResNet-152 numbers are only included as a reminder. The version of Inception V3 being benchmarked does not include the auxiliary tower. Top-1 accuracy Top-5 accuracy VGG-16 0.715 0.901 ResNet-152 0.770 0.933 Inception V3 0.782 0.941 Xception 0.790 0.945 The Xception architecture shows a much larger perfor- mance improvement on the JFT dataset compared to the ImageNet dataset. We believe this may be due to the fact that Inception V3 was developed with a focus on ImageNet and may thus be by design over-\ufb01t to this speci\ufb01c task. On the other hand, neither architecture was tuned for JFT. It is likely that a search for better hyperparameters for Xception Table 2. Classi\ufb01cation performance comparison on JFT (single crop, single model). FastEval14k MAP@100 Inception V3 - no FC layers 6.36 Xception - no FC layers 6.70 Inception V3 with FC layers 6.50 Xception with FC layers 6.78 Figure 6. Training pro\ufb01le on ImageNet Figure 7. Training pro\ufb01le on JFT, without fully-connected layers ularization parameters) would yield signi\ufb01cant additional improvement. 4.5.2 Size and speed Table 3. Size and training speed comparison. Parameter count Steps/second Inception V3 23,626,728 31 Xception 22,855,952 28 In table 3 we compare the size and speed of InceptionFigure 8. Training pro\ufb01le on JFT, with fully-connected layers V3 and Xception. Parameter count is reported on ImageNet (1000 classes, no fully-connected layers) and the number of training steps (gradient updates) per second is reported on ImageNet with 60 K80 GPUs running synchronous gradient descent. Both architectures have approximately the same size (within 3.5%), and Xception is marginally slower. We expect that engineering optimizations at the level of the depthwise convolution operations can make Xception faster than Inception V3 in the near future. The fact that both architectures have almost the same number of parameters indicates that the improvement seen on ImageNet and JFT does not come from added capacity but rather from a more ef\ufb01cient use of the model parameters. 4.6. Effect of the residual connections Figure 9. Training pro\ufb01le with and without residual connections. To quantify the bene\ufb01ts of residual connections in the Xception architecture, we benchmarked on ImageNet a mod- connections. Results are shown in \ufb01gure 9. Residual con- nections are clearly essential in helping with convergence, both in terms of speed and \ufb01nal classi\ufb01cation performance. However we will note that benchmarking the non-residual model with the same optimization con\ufb01guration as the resid- ual model may be uncharitable and that better optimization con\ufb01gurations might yield more competitive results. Additionally, let us note that this result merely shows the importance of residual connections for this speci\ufb01c architec- ture, and that residual connections are in no way required in order to build models that are stacks of depthwise sepa- rable convolutions. We also obtained excellent results with non-residual VGG-style models where all convolution layers were replaced with depthwise separable convolutions (with a depth multiplier of 1), superior to Inception V3 on JFT at equal parameter count. 4.7. Effect of an intermediate activation after point- wise convolutions Figure 10. Training pro\ufb01le with different activations between the depthwise and pointwise operations of the separable convolution layers. We mentioned earlier that the analogy between depth- wise separable convolutions and Inception modules suggests that depthwise separable convolutions should potentially in- clude a non-linearity between the depthwise and pointwise operations. In the experiments reported so far, no such non- linearity was included. However we also experimentally tested the inclusion of either ReLU or ELU [ 3] as intermedi- ate non-linearity. Results are reported on ImageNet in \ufb01gure 10, and show that the absence of any non-linearity leads to both faster convergence and better \ufb01nal performance. This is a remarkable observation, since Szegedy et al. re- port the opposite result in [ 21] for Inception modules. It may be that the depth of the intermediate feature spaces on which spatial convolutions are applied is critical to the usefulness of the non-linearity: for deep feature spaces (e.g. thosefound in Inception modules) the non-linearity is helpful, but for shallow ones (e.g. the 1-channel deep feature spaces of depthwise separable convolutions) it becomes harmful, possibly due to a loss of information. 5. Future directions We noted earlier the existence of a discrete spectrum be- tween regular convolutions and depthwise separable convo- lutions, parametrized by the number of independent channel- space segments used for performing spatial convolutions. In- ception modules are one point on this spectrum. We showed in our empirical evaluation that the extreme formulation of an Inception module, the depthwise separable convolution, may have advantages over regular a regular Inception mod- ule. However, there is no reason to believe that depthwise separable convolutions are optimal. It may be that intermedi- ate points on the spectrum, lying between regular Inception modules and depthwise separable convolutions, hold further advantages. This question is left for future investigation. 6. Conclusions We showed how convolutions and depthwise separable convolutions lie at both extremes of a discrete spectrum, with Inception modules being an intermediate point in be- tween. This observation has led to us to propose replacing Inception modules with depthwise separable convolutions in neural computer vision architectures. We presented a novel architecture based on this idea, named Xception, which has a similar parameter count as Inception V3. Compared to Inception V3, Xception shows small gains in classi\ufb01cation performance on the ImageNet dataset and large gains on the JFT dataset. We expect depthwise separable convolutions to become a cornerstone of convolutional neural network architecture design in the future, since they offer similar properties as Inception modules, yet are as easy to use as regular convolution layers. References [1]M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen, C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, S. Ghe- mawat, I. Goodfellow, A. Harp, G. Irving, M. Isard, Y . Jia, R. Jozefowicz, L. Kaiser, M. Kudlur, J. Levenberg, D. Man \u00b4e, R. Monga, S. Moore, D. Murray, C. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever, K. Talwar, P. Tucker, V . Van- houcke, V . Vasudevan, F. Vi \u00b4egas, O. Vinyals, P. Warden, M. Wattenberg, M. Wicke, Y . Yu, and X. Zheng. Tensor- Flow: Large-scale machine learning on heterogeneous sys- tems, 2015. Software available from tensor\ufb02ow.org. [2] F. Chollet. Keras. https://github.com/fchollet/keras, 2015. [3]D.-A. Clevert, T. Unterthiner, and S. Hochreiter. Fast and accurate deep network learning by exponential linear units (elus). arXiv preprint arXiv:1511.07289[4] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. arXiv preprint arXiv:1512.03385 , 2015.",
            "G. Hinton, O. Vinyals, and J. Dean. Distilling the knowledge in a neural network, 2015.",
            "A. Howard. Mobilenets: Ef\ufb01cient convolutional neural net- works for mobile vision applications. Forthcoming.",
            "S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. InProceedings of The 32nd International Conference on Machine Learning , pages 448\u2013456, 2015.",
            "J. Jin, A. Dundar, and E. Culurciello. Flattened convolutional neural networks for feedforward acceleration. arXiv preprint arXiv:1412.5474 , 2014.",
            "A. Krizhevsky, I. Sutskever, and G. E. Hinton. Imagenet classi\ufb01cation with deep convolutional neural networks. In Advances in neural information processing systems , pages 1097\u20131105, 2012.",
            " Y . LeCun, L. Jackel, L. Bottou, C. Cortes, J. S. Denker, H. Drucker, I. Guyon, U. Muller, E. Sackinger, P. Simard, et al. Learning algorithms for classi\ufb01cation: A comparison on handwritten digit recognition. Neural networks: the statistical mechanics perspective , 261:276, 1995.",
            " M. Lin, Q. Chen, and S. Yan. Network in network. arXiv preprint arXiv:1312.4400 , 2013.",
            " F. Mamalet and C. Garcia. Simplifying ConvNets for Fast Learning. In International Conference on Arti\ufb01cial Neural Networks (ICANN 2012) , pages 58\u201365. Springer, 2012.",
            " B. T. Polyak and A. B. Juditsky. Acceleration of stochas- tic approximation by averaging. SIAM J. Control Optim. , 30(4):838\u2013855, July 1992.",
            " O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, et al. Ima- genet large scale visual recognition challenge. 2014.",
            " L. Sifre. Rigid-motion scattering for image classi\ufb01cation, 2014. Ph.D. thesis.",
            " L. Sifre and S. Mallat. Rotation, scaling and deformation invariant scattering for texture discrimination. In 2013 IEEE Conference on Computer Vision and Pattern Recognition, Portland, OR, USA, June 23-28, 2013 , pages 1233\u20131240, 2013.",
            " N. Silberman and S. Guadarrama. Tf-slim, 2016.",
            " K. Simonyan and A. Zisserman. Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556 , 2014.",
            " C. Szegedy, S. Ioffe, and V . Vanhoucke. Inception-v4, inception-resnet and the impact of residual connections on learning. arXiv preprint arXiv:1602.07261 , 2016.",
            " C. Szegedy, W. Liu, Y . Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan, V . Vanhoucke, and A. Rabinovich. Going deeper with convolutions. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition , pages 1\u20139, 2015.",
            " C. Szegedy, V . Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna. Rethinking the inception architecture for computer vision. arXiv preprint arXiv:1512.00567 , 2015.",
            " T. Tieleman and G. Hinton. Divide the gradient by a run- ning average of its recent magnitude. COURSERA: NeuralNetworks for Machine Learning, 4, 2012. Accessed: 2015- 11-05.",
            " V . Vanhoucke. Learning visual representations at scale. ICLR, 2014.",
            " M. Wang, B. Liu, and H. Foroosh. Factorized convolutional neural networks. arXiv preprint arXiv:1608.04337 , 2016.",
            ""
        ]
    },
    {
        "title": "Xception: Deep Learning with Depthwise Separable Convolutions",
        "arxiv_id": "1610.02357"
    }
]